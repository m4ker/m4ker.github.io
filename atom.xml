<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Maker's Blog]]></title>
  <subtitle><![CDATA[我相信, 太阳地下有很多值得去的地方, 最近的就在我们心中.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://blog.foolbird.net/"/>
  <updated>2022-08-24T14:20:17.000Z</updated>
  <id>https://blog.foolbird.net/</id>
  
  <author>
    <name><![CDATA[王默]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我的2019]]></title>
    <link href="https://blog.foolbird.net/5016.html"/>
    <id>https://blog.foolbird.net/5016.html</id>
    <published>2020-01-05T14:58:00.000Z</published>
    <updated>2022-08-24T14:20:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="去了哪?">去了哪?</h3>
<p>去年可能是最近几年出去浪的最少的一年，但奔波却从来没有停止，因为工作去了一次南京和几次杭州。花了不少的时间往返于东北、新加坡和北京之间。年初去广州探望刚做完手术的三姨，下半年又去了武汉落户，国庆节一瘸一拐的在曼谷和普吉岛游荡了几日。</p>
<h3 id="读了什么书?">读了什么书?</h3>
<p>去年勉强算是读了一些书，主要的方向是技术类《算法》、《设计模式》，经济金融类《伟大的博弈》、《股票作手回忆录》、《心若菩提》，英语类《The World Of Edena》、《英语魔法师之语法俱乐部》和《上帝掷骰子吗》、《少有人走的路》。</p>
<h3 id="玩了什么游戏？">玩了什么游戏？</h3>
<p>玩了一段时间的《一起来捉妖》体验并不理想，后来因为PS4一直挂闲鱼上卖不出去一气之下入了《荒野大镖客2》，这可能是我这辈子在玩游戏上花的最值的二百块钱，虽然还没通关，但总的来说惊喜不断。</p>
<h3 id="剁了哪些手？">剁了哪些手？</h3>
<p>纠结了很久终于买了一款我自己的 Macbook pro，另外还有佳明飞耐时5s，IPad Air，AirPods Pro，罗技 MX ERGO。入了口琴的坑之后一发不可收拾，在闲鱼上出了7把琴之后，我现在手里还有10把口琴，未来可能会超过20把，在买过这么多口琴之后，决定以后只买Hohner和Seydel的口琴，gm、mbc、mbd都是经得住考验的好琴。</p>
<h3 id="看了什么？">看了什么？</h3>
<p>感觉自己花在看剧、电影上的时间一直都比身边的人少很多，数量上不去就只能在质量上下功夫。去年趁着《权利的游戏》终结一口气刷完了八季，另外还看了《长安十二时辰》、《潜行追踪》和《征服》。</p>
<p>在新加坡跨年正巧赶上了音乐剧《猫》在新加坡金沙剧院的演出，虽然台词大多听不懂，但整场演出还是让人感觉很惊喜。</p>
<p>剩下就是一些电影，其中不少是在飞机上看的，《倩女幽魂1&amp;2》、《白蛇》、《绿皮书》、《敦刻尔克》、《哪吒之魔童降世》、《无双》、《阿丽塔》、《飞驰人生》、《恶人传》、《一个叫欧维的男人决定去死》、《狮子王》、《花样年华》、《血战钢锯岭》、《诺丁山》、《天空之城》、《小丑》、《美国往事》，再刷《战争之王》，《少年的你》是难得的国产好电影，《蓝调传奇》给我打开了一扇新世界的大门。</p>
<h3 id="学了什么?">学了什么?</h3>
<p>技术方面继续在Java方向下功夫，去年终于读完了《算法》，还顺便在leetcode上刷了一百多道入门的算法题，算法是门艰深的学问，只学到一点皮毛，想要深入学习需要花大量的时间，我还没有做好这个准备。</p>
<p>技术之外花了大量的时间学习英语、金融学、布鲁斯口琴和乐理知识。在语法上有不小的进步，主要是因为啃了两遍《英语魔法师》，突然就领悟到了其中的套路，也花了一些时间练习听和读，不过进步十分缓慢。利用上班路上的时间听完了《香帅的金融学》，对金融学相关的概念和知识有了一个基本的了解，脑子一热还买了《公司理财》和《投资学》，一直都没翻开第一页。从8月开始去参加了蓝调口琴网组织的线下口琴课程，每天练习至少30分钟，目前已经坚持了4个月，虽然马上要lv5结业了，但水平实在太差，布鲁斯口琴是我目前接触过最难的乐器，没有之一。</p>
<h3 id="做了什么？">做了什么？</h3>
<p>年初本计划着要花一些时间运动，但由于各种各样的原因没有能坚持下来，每周的游泳也中断了很长时间，尤其是下半年，脚上的跖疣复发，甚至还开刀做了手术，目前还在坚持每周做冷冻治疗。</p>
<p>去年是接触美股的第三年，也尝试了一下投资港股，过去两年股市大起大落，目前整体略有盈余。股票之外，P2P资产仅保留了很少的一部分，房产信托投资效果不是很理想，大部分已卖出。</p>
<p>剩下最重要的事情就是家庭的移民计划，老婆已经成功拿到新加坡工作签证，我也拿到了家属准证，但是我一直没有找到合适的工作或者转岗机会，从PHP转型到Java还有很长的路要走。除了新加坡的移民计划，我还留了一个退路，拿到了深圳户口。过去一年两地分居的生活十分艰难，也花了非常长的时间去适应，甚至花了很长的时间整理、处置物品和搬家。</p>
<p>去年是里程碑式的一年，我身边所有的同龄人全部成家，也包括我自己，我们都告别了单打独斗的阶段，开始了团队作战，人生新的篇章已经拉开序幕。我每次回到老家都要去看看老铁家的娃，一方面是学习育儿知识，另一方面是思考未来。成家后和成家前的区别在哪里呢? 我想应该是以前是一个人做梦，梦里只有你自己未来的样子，而现在是两个人一起做梦，每个人的梦里都有未来两个人的样子。</p>
<p>最后是很有仪式感的环节，看看去年的Flag完成情况和立新一年的Flag。</p>
<h3 id="2019年计划：">2019年计划：</h3>
<ul>
  <li>学习英语100个小时（完成）</li>
  <li>学习经济学和金融学100个小时（完成）</li>
  <li>读完《算法》，解决100个初中级算法问题（完成）</li>
  <li>坚持运动150天（未完成50/150）</li>
  <li>去欧洲旅行（未完成）</li>
</ul>
<h3 id="2020年计划：">2020年计划：</h3>
<ul>
  <li>学习技术150个小时，主要涉及Java基础知识、数据结构、JVM、设计模式、并发等</li>
  <li>学习英语150个小时，按优先级排列：说、听、单词</li>
  <li>练习口琴150个小时，积累10首完整的曲子，主要的方向是传统blues，Little Walter 和 Big Walter</li>
  <li>坚持运动150天，恢复自由泳的练习</li>
  <li>今年要学习的新技能可能是摄影或者钢琴</li>
  <li>改善投资比例，谨慎使用杠杆</li>
  <li>欧美的旅行、买房、造人和移民仍然会安排在今年的计划中</li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="去了哪?">去了哪?</h3>
<p>去年可能是最近几年出去浪的最少的一年，但奔波却从来没有停止，因为工作去了一次南京和几次杭州。花了不少的时间往返于东北、新加坡和北京之间。年初去广州探望刚做完手术的三姨，下半年又去了武汉落户，国庆节一瘸一拐的在曼谷和普吉岛游荡了]]>
    </summary>
    
      <category term="2019" scheme="https://blog.foolbird.net/tags/2019/"/>
    
      <category term="总结" scheme="https://blog.foolbird.net/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2018]]></title>
    <link href="https://blog.foolbird.net/5015.html"/>
    <id>https://blog.foolbird.net/5015.html</id>
    <published>2018-12-31T07:15:00.000Z</published>
    <updated>2018-12-31T13:04:17.000Z</updated>
    <content type="html"><![CDATA[<p>四月份是我三十周岁的生日，生日前有一段时间，我非常的焦虑。我觉得可能每个人都希望人生是一段代码，你只要每隔一段时间去优化和重构它，人生就会如你所愿的执行下去。可不幸的是，你不能停下来调试，你也不能决定这段代码运行在什么硬件上，你只能不断的根据报表和日志进行热升级和热修复，并且要想方设法推迟被kill掉的时间。</p>
<h3 id="去了哪？">去了哪？</h3>
<ul>
  <li>四月在台湾花莲度过了自己三十周岁的生日</li>
  <li>九月在美国西海岸自驾十天</li>
  <li>亲自策划了十一月的普吉岛团建</li>
</ul>
<p>今年只去了三个地方旅行，台湾和普吉岛都是第二次去，没有匆匆忙忙的行程更加轻松一些。在美国的十天感觉特别的漫长，每一天都有太多的新鲜事物要去面对。今年更多的时间，我都是在思考与我们生活在不同制度下的人如何度过他们的一生。除了旅行，今年更多的时间都花在回家上，差不多保持了每月一次。</p>
<h3 id="做了什么？">做了什么？</h3>
<ul>
  <li>练习自由泳</li>
  <li>学习Java相关的知识</li>
  <li>学习经济学</li>
  <li>学习算法</li>
  <li>完成了100节英语课的学习</li>
  <li>打了将近500场王者荣耀</li>
  <li>最好的朋友结婚</li>
  <li>六月份毕业十周年聚会</li>
  <li>十月份在美国结婚</li>
  <li>合伙投资了一家养牛场</li>
  <li>投资美股, 受人民币贬值、经济形势、京东事件的综合影响，有7%的收益</li>
  <li>拿到了美国的银行卡和信用卡</li>
  <li>买了appletv、专门的软件服务和路由器，现在可以在家里看正版的美剧</li>
  <li>练习吉他《如果有一天我变得很有钱》、《青春》、《平凡之路》</li>
</ul>
<h3 id="读了什么书?">读了什么书?</h3>
<ul>
  <li>《Java编程思想》</li>
  <li>《金字塔原理》</li>
</ul>
<h3 id="看了哪些好电影?">看了哪些好电影?</h3>
<ul>
  <li>《放牛班的春天》</li>
  <li>《当幸福来敲门》</li>
  <li>《天使爱美丽》</li>
  <li>《窃听风暴》</li>
  <li>《英雄本色1、2》</li>
  <li>《三傻大闹宝莱坞》</li>
  <li>《遗愿清单》</li>
  <li>《教父三部曲》</li>
  <li>《美丽人生》</li>
  <li>《我不是药神》</li>
  <li>《低俗小说》</li>
  <li>《闻香识女人》</li>
  <li>《西虹市首富》</li>
  <li>《纵横四海》</li>
  <li>《和平饭店》</li>
  <li>《阳光灿烂的日子》</li>
  <li>《重庆森林》</li>
  <li>《阿飞正传》</li>
  <li>《头号玩家》</li>
  <li>《血钻》</li>
  <li>《美丽心灵》</li>
  <li>《达拉斯买家俱乐部》</li>
  <li>《傲慢与偏见》</li>
  <li>《红高粱》</li>
  <li>《太阳泪》</li>
  <li>《大卫戈尔的一生》</li>
  <li>《蝙蝠侠：黑暗骑士崛起》</li>
</ul>
<h3 id="买了什么好东西？">买了什么好东西？</h3>
<ul>
  <li>Tello</li>
  <li>空气净化器</li>
  <li>Ticpod</li>
  <li>Apple TV</li>
  <li>Ultra Boost</li>
  <li>TUMI</li>
  <li>Iphone8</li>
  <li>小米扫地机器人</li>
  <li>Apple Pencil</li>
  <li>Dyson V6</li>
</ul>
<p>工作上大部分时间在思考如何使用Java搭建业务系统。有一件对我来说很重要的事情是我今年完成了几乎所有PHP相关系统的下线工作，一个时代落下帷幕，希望今年的努力能有收获。另外今年仍然坚持高效的工作，无特殊情况不加班，希望能保持下去。</p>
<p>看看去年立下的flag今年完成的怎么样：</p>
<ul>
  <li>100节英语课（完成）</li>
  <li>2000个英语单词（779/2000）</li>
  <li>Java达到中级工程师的水平（无法衡量）</li>
  <li>读完《算法》（377/610）</li>
  <li>自由泳500米（完成）</li>
  <li>健身，增重4公斤（共运动117天，9月份达到3公斤，年底维持在1公斤）</li>
  <li>滑雪征服初级道（未完成，今年冬天没滑雪）</li>
  <li>一次一周左右的欧洲或美国的旅行（完成）</li>
  <li>一次演出（完成）</li>
  <li>在家里买一套房（未完成）</li>
  <li>投资美股（无衡量标准）</li>
</ul>
<p>明年的计划是什么？</p>
<ul>
  <li>学习英语100个小时</li>
  <li>学习经济学和金融学100个小时</li>
  <li>读完《算法》，解决100个初中级算法问题</li>
  <li>坚持运动150天</li>
  <li>去欧洲旅行</li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<p>四月份是我三十周岁的生日，生日前有一段时间，我非常的焦虑。我觉得可能每个人都希望人生是一段代码，你只要每隔一段时间去优化和重构它，人生就会如你所愿的执行下去。可不幸的是，你不能停下来调试，你也不能决定这段代码运行在什么硬件上，你只能不断的根据报表和日志进行热升级和热修复，并]]>
    </summary>
    
      <category term="2018" scheme="https://blog.foolbird.net/tags/2018/"/>
    
      <category term="总结" scheme="https://blog.foolbird.net/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个悲伤的故事]]></title>
    <link href="https://blog.foolbird.net/5014.html"/>
    <id>https://blog.foolbird.net/5014.html</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-04T19:19:36.000Z</updated>
    <content type="html"><![CDATA[<p>最近有一件事情, 真心让我苦恼, 我曾经去支教的那个组织的核心组织管理者从我这里借了一万块钱, 并且赖账不还有一年了. 更坏的情况是, 我在最近半年的时间里, 陆陆续续听其他人听说了她的所作所为, 如你所想, 我并不是唯一的受害者.</p>
<p>整个事情要从14年说起了, 那一年我刚从长春的一家技术公司离职, 花了半年时间旅行、考驾照, 另外半年去了广西边境一个村子的学校当老师, 是通过网上找到的一个叫“中国支教联盟”的组织前往的学校, 15年1月结束了一学期的支教生活我来到了北京开始了新的生活.</p>
<p>来到北京几个月之后, “中国支教联盟”的发起人王娟(网名年小恩)在网上找到我, 因为听广西支教的队长说我是做技术的, 希望我能帮助组织维护他们的网站(<a href="http://www.go9999.com" target="_blank" rel="external">http://www.go9999.com</a>), 于是我开始从前一个维护者苏洋手里将网站接手过来, 并在网上发布了招募贴寻找一起维护网站的志愿者, 并且真的找到了几个网友来帮忙, 并且和李某一起花了半年的时间重新开发了整个网站, 代码开源在github(<a href="https://github.com/CNAEF/go9999_v2" target="_blank" rel="external">https://github.com/CNAEF/go9999_v2</a>),
  之后一直维护该网站到今年的某一天.</p>
<p>17年9月份某个晚上, 王娟在网上找到我, 借1万块钱周转, 约定两个月之后归还, 没过几分钟我便把钱打到了她发我的支付宝上. 17年底我开始不时的询问她是否可以还钱, 开始她会找个理由约定一个时间还钱, 比如下周赞助商的钱到了就还、或者下个月家里给打钱这样, 几个月之后她便不再提还钱的事情. 与此同时另一件事情悄悄的在进行, 她在我不知情的情况下联系李某, 开始了新网站的开发工作.</p>
<p>后面的故事完全按照最坏的情况展开, 开始只是侧面了解她经常借钱, 然后就是听说有人在微博上说她欠钱不还, 在几个月前的某一天, 网站域名在我不知情的情况下解析到了新的服务器上, 这也基本上宣布了我的钱不再可能要回来了, 这是个主观想法, 我尽量只描述我的所见所闻, 因为真相是什么我从不曾知道.</p>
<p>这件事给了我一个深刻的教训,你永远不知道在精心包装过的善良背后隐藏着怎样的陷阱. 最近几年,我花了不少时间在所谓的公益上面, 也或多或少看见或听到各种各样的事情. 另一个让我耿耿于怀的事情是阿里内部的公益3小时, 6年前马云倡导了一个每年公益3小时的活动, 在阿里巴巴财年结束前的一个月, 你会看到成群结队的阿里员工在公司附近的街道或者公园里捡垃圾或者扶共享单车, 我并不是说捡垃圾和扶单车不好, 我只是觉得一个中午看到几群人在同一个地方假装捡垃圾并没有让这个世界变好, 我只是觉得这些年薪几十上百万的人做这件事几乎没产生价值,
  一群人浪费掉几十个小时的生命只换了一名清洁工人几分钟到几十分钟的工作这实在有点低效, 只是觉得一群阿里员工在大街上逛一个小时扶起几十辆自行车拍上几十张照片是在浪费生命. 然而我身边的多数人,都宁愿浪费掉自己的这几个小时,而不想把这些时间用在真正有意义的事情上面. 那公益3小时是强制的吗? 并不是, 只是多数人都觉得这可能会影响到他们拿到的年终奖的多少.</p>
<p>在这些事情发生之后, 我常常想去抱怨, 却又觉得真心没用, 我也没有和太多人说起这些事情, 直到后来有一天, 另一个志愿者来给我讲了她的事情, 我突然觉得有必要做一些什么, 虽然我也不愿意揭开这一切, 但是总不能坐以待毙, 看着事情变得更糟我也会感到内疚.</p>
<p>上周的某一天晚上, 在一个好友的帮助下, 我给我能找到的所有的手机号码发了一个“温馨提醒”, 大概近千人, 令我惊讶的是竟然都没有人在意过去几年几千人的报名数据, 甚至也没有人来找我要服务器的账号密码, 可能这些数据和我一样, 对于这个组织不再有价值.</p>]]></content>
    <summary type="html">
    <![CDATA[<p>最近有一件事情, 真心让我苦恼, 我曾经去支教的那个组织的核心组织管理者从我这里借了一万块钱, 并且赖账不还有一年了. 更坏的情况是, 我在最近半年的时间里, 陆陆续续听其他人听说了她的所作所为, 如你所想, 我并不是唯一的受害者.</p>
<p>整个事情要从14年说起了,]]>
    </summary>
    
      <category term="中国支教联盟" scheme="https://blog.foolbird.net/tags/%E4%B8%AD%E5%9B%BD%E6%94%AF%E6%95%99%E8%81%94%E7%9B%9F/"/>
    
      <category term="年小恩" scheme="https://blog.foolbird.net/tags/%E5%B9%B4%E5%B0%8F%E6%81%A9/"/>
    
      <category term="王娟" scheme="https://blog.foolbird.net/tags/%E7%8E%8B%E5%A8%9F/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2017]]></title>
    <link href="https://blog.foolbird.net/5013.html"/>
    <id>https://blog.foolbird.net/5013.html</id>
    <published>2017-12-31T15:00:00.000Z</published>
    <updated>2018-08-04T18:18:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="个人总结">个人总结</h2>
<p>时隔一年终于有了一个不得不更新的理由，今年一直都没有内容要分享，一方面没有太多的空闲时间，另一方面觉得没有能拿的出手的内容可以写，在三十而立之前，人生突然峰回路转又回到了一个入门阶段。</p>
<p>上半年家里买了一辆车，半年的时间跑了三千公里，算是第一个入门技能；下半年报了英语班，每个周末上四节课，决心告别哑巴英语；经过一年半的折腾，公司已经彻底被阿里化，所以我也不得不成为了一名Java入门工程师；买了自由泳的私教课，另外还有一个计划是在这个冬季结束前，征服单板初级道。今天也不禁感慨，我今年29岁，却在补习的全部都是20岁之前应该掌握的技能，希望看到的年轻人能引以为戒。</p>
<p>年初家里发生了很大的变故，母亲生病住院，我在医院陪护了二十天，我在这段时间思考了比我二十几年思考的还要多，关于我的过去，也关于我的未来，也对我今后的目标做了不小的调整，对我来说人生已经不是我一个人的远方，而是有了更多的担当和绝不妥协的理由。</p>
<h2 id="工作总结">工作总结</h2>
<p>另外一个不得不提的是工作，之前一起工作的同事因为种种原因大都离开了去了别的地方发展，留下来的寥寥无几，他们的离开给我带来了不少麻烦，不止是交接了很多工作，也开始直面他们所遇到的困境。当然付出和收获在多数时候都是呈正比的，今年我经历了比以前几年还多的事情，也收获了比往年多的多的结果。虽然有的时候仍然觉得自己是一个局外人，觉得不公平，但是相比之前的狗血经历这已经是很不错了，另外要时刻记住自己的目标，以结果为导向。</p>
<p>由于以上种种情况，有很多计划都没有完成，没有读很多书，也没有去很多地方，希望下一年能够做的更好。</p>
<h2 id="思考和展望">思考和展望</h2>
<p>过去的一年在心态上有了不小的变化，放下了很多执念，也放空了自己，希望可以重新规划自己未来几十年的目标，目前为止还没找到，我并不想在职业生涯上走的更高更远，也没想好如果不工作自己会去做什么，但是自由职业和财务自由已经开始进入我的思考范围。对于房子、股票和比特币的思考或多或少改变了我对财富的看法，新的一年将会做更多的思考和尝试。</p>
<h2 id="下一个阶段性目标">下一个阶段性目标</h2>
<p>介于目前所处的阶段，新一年的主要目标仍然是要在入门阶段继续提升自己，在各个方面早日进入“进阶”阶段。</p>
<p>先回顾一下2017年立下的目标：</p>
<ul>
  <li><del>学射箭</del>（弓买了之后成了摆设）</li>
  <li>好好练习一下单板（在学习）</li>
  <li>清明去新加坡的机票已经买好（完成）</li>
  <li><del>去欧美看一看</del></li>
  <li><del>考摩托驾照</del></li>
  <li>练车，这很重要（自动挡已经可以熟练的驾驶）</li>
  <li>修牙（拔了一颗智齿，但是还有很多问题要治）</li>
  <li>英语口语和单词量（上了47节英语课，看了两遍语法入门视频，打卡176天背了2000+单词）</li>
  <li><del>蛙泳要更快，</del>自由泳可以以后再学（在学自由泳）</li>
  <li><del>C语言要继续学下去</del>（今年看了一些Java和Python）</li>
  <li><del>在技术上要有输出和积累</del></li>
  <li><del>要考虑结婚生娃，为了人类</del></li>
  <li><del>口琴要继续练</del>（几乎停滞不前，今年吉他弹熟了两首歌）</li>
</ul>
<p>2018年的小目标：</p>
<ul>
  <li>英语：100节英语课，2000个英语单词（目前6930）</li>
  <li>技术：Java技术栈工作之外达到面试中级工程师的水平，看完算法或者算法导论</li>
  <li>运动：自由泳500米，健身增重4公斤（目前63kg），滑雪征服初级道</li>
  <li>旅行：计划一次一周左右的欧洲或美国的旅行</li>
  <li>音乐：计划一次演出</li>
  <li>财富：在家里买一套房，继续投资美股</li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="个人总结">个人总结</h2>
<p>时隔一年终于有了一个不得不更新的理由，今年一直都没有内容要分享，一方面没有太多的空闲时间，另一方面觉得没有能拿的出手的内容可以写，在三十而立之前，人生突然峰回路转又回到了一个入门阶段。</p>
<p>上半年家里买了一辆车，半年]]>
    </summary>
    
      <category term="总结" scheme="https://blog.foolbird.net/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2016]]></title>
    <link href="https://blog.foolbird.net/5011.html"/>
    <id>https://blog.foolbird.net/5011.html</id>
    <published>2016-12-31T09:00:00.000Z</published>
    <updated>2016-12-31T10:10:16.000Z</updated>
    <content type="html"><![CDATA[<p>这一年对我来说又是一个丰富多彩的一年，过去很长一段时间因为种种原因没有再静下心来写一些什么，所以这次一定要把这一篇写完，不希望2016年的总结和前几年一样不了了之。</p>
<h2 id="工作篇">工作篇</h2>
<p> #友宝 #裁员 #优酷 #阿里 #996</p>
<p>过去一年对我影响最大的事情可能都与工作相关，15年底友宝裁员，我没选择去深圳总部，只能拿钱走人。和同事几个人一起去了他们成立的新公司，和来北京之前一样，工作的第八个年头没有公司年会，没有双薪，没有年终奖，也没有希望，所以我离开了，重新启程。</p>
<p>没能通过美团的面试，也没有去极客学院，最后机缘巧合入职了优酷会员中心。背景调查用了整整一个月的时间，3月入职，4月优酷土豆被阿里收购，所以摇身一变成了阿里人。</p>
<p>新的工作有一些机会可以接触到一些核心业务，也有可以负责一些比较重要的技术改造，令我感到意外的是，这一年竟然几乎没怎么和产品经理打交道。</p>
<p>下半年优酷经历了大规模的空降和换血，新官上任最重要的几件事是融入阿里的文化，使用阿里的技术，当然也要在双十一、双十二时接受考验。代价是很惨痛的，我们经历了4个月的996，多数人连十一长假都在加班，还有一堆的年假和带薪病假等着过期。</p>
<p>令人欣慰的是，昨天，是996的最后一天，今年会有年会，有双薪，有项目奖，有年终奖。</p>
<h2 id="个人成长篇">个人成长篇</h2>
<p> #英语 #口琴 #吉他 #C #游泳</p>
<p>除了工作，今年花了最多时间的事情是学英语，背了几千个单词，早晚的交通时间大多都用来学英语，如果不出意外，今天会完成在扇贝单词的第174次打卡。</p>
<p>除了996最忙的一段时间之外，每周都会去游泳，一方面为了锻炼身体，另一方面为了保证长时间写代码颈椎不会很痛，今年还是没能掌握自由泳，但是蛙泳各方面都有进步，明年要在速度上有所提高。</p>
<p>今年很少利用业余时间研究技术，这可能是一件很遗憾的事情，但是在工作时间内还是学到了大量的东西，在工作中处理的数据规模和并发量也达到了一个新的层次。</p>
<p>最近几个月花了一些时间重新学习了C语言，现在已经把相关语法特性学习完，正在学习数据结构和算法，希望能坚持下去，用到实际应用中，希望未来有机会能深入了解现在用到的相关技术栈的实现原理。</p>
<p>大概有半年没有再弹过吉他，谱子已经忘光，但是今年还是有进步的，可以大横按F和弦了。布鲁斯口琴也有进步，虽然不是很熟练，但已经基本上找到了压音的方法。</p>
<h2 id="旅行篇">旅行篇</h2>
<p> #香港 #泰国 #澳门 #台湾 #北戴河 #深圳 #珠海</p>
<p>护照已经拿到手快三年，今年终于用到了，换工作的空档借道香港去泰国转了转，玩的蛮好，更重要的是也正是从那个时候开始，让我有了另一个目标，想去更远的地方走一走，工作或者生活，也正是从那个时候开始认认真真的学英语。</p>
<p>体验过泰国之后就对国内旅游不再感兴趣了，今年去了一次北戴河，体验糟透了。</p>
<p>下半年花了一些时间规划了一次台湾之旅，整个过程很曲折，不过在台湾的那段时间是非常开心的，也颠覆了我对很多事情的想法，想去了解相关的政治、历史和文化，因为我从来没想过，这些几十年前被迫离开故土的人，如今在这里生活的如此幸福。</p>
<p>去台湾之前顺便去澳门逛了一下，这里的确是男人的天堂，不过最终我还是没有在澳门赌上两把，在见识过别人十几万一局的豪赌之后，我对赌博这个事情有了新的认识；虽然整个在澳门的过程中我都没见到，但估计澳门的色情产业也是很发达的。</p>
<h2 id="理财篇">理财篇</h2>
<p> #互联网金融 #A股 #美股</p>
<p>离开友宝之后我的账户上第一次达到了6位数，所以也开始思考如何进行理财，目前大部分的钱放在定期的互联网金融产品里，一小部分在活期产品里，另一小部分在A股和美股市场，股票这东西我就不展开了，目前还不具备相关的知识，甚至还不能以正确的心态来看待，未来还要持续的关注和学习。</p>
<h2 id="读书篇">读书篇</h2>
<ul>
  <li>
    <p>《C Primer Plus》内容很丰富，适合入门学习，这是我第一次把一本如此厚的书认认真真的看了两遍，但是看完之后才发现，这只是万里长征的第一步。</p>
  </li>
  <li>
    <p>《美国种族简史》内容很有趣，的确引发了不少思考。</p>
  </li>
  <li>
    <p>《图解HTTP》、《 JavaScript设计模式》、《RabbitMQ实战》这三本，我现在竟然已经回忆不起来里面的任何细节了，看来需要好好反思一下自己的读书方法。</p>
  </li>
  <li>
    <p>《硅谷之谜》今年不经意的发现，吴军博士也开始写烂书了，很失望。</p>
  </li>
  <li>
    <p>《人月神话》书里讨论了很多软件工程中的问题，很多事情都很有共鸣，这些问题被大家讨论了几十年，但是为什么现在这么多的团队还是做不好？现在还对书里提到的外科医生团队记忆犹新，希望以后可以有机会尝试。</p>
  </li>
  <li>
    <p>《深入浅出Rails》为数不多的rails中文书籍，书中的内容比较旧，而且也只展示了rails中最基础的一部分，很遗憾没能走上rails这条路。</p>
  </li>
  <li>
    <p>《Node与Express开发》、《ECMAScript6入门》前两年JavaScript实在是太火了，所以忍不住也学习了一些相关内容，感叹JavaScript相关技术进步速度如此迅速。</p>
  </li>
  <li>
    <p>《JavaScript高级程序设计》是本好书，我第一次读到面向对象那部分的时候是十分震撼的，进阶必读。</p>
  </li>
</ul>
<h2 id="电影&amp;电视篇">电影&amp;电视篇</h2>
<ul>
  <li>地球脉动</li>
  <li>西部世界</li>
  <li>怦然心动</li>
  <li>奇异博士</li>
  <li>大鱼海棠</li>
  <li>超人总动员</li>
  <li>纳尼亚传奇1</li>
  <li>釜山行</li>
  <li>魔兽</li>
  <li>奇幻森林</li>
  <li>华尔街之狼</li>
  <li>恐怖直播</li>
  <li>心迷宫</li>
  <li>唐人街探案</li>
  <li>寻龙诀</li>
  <li>云中行走</li>
  <li>一个勺子</li>
  <li>老炮儿</li>
</ul>
<p>今年看剧较少，希望明年有更多的好电影，有了投影仪之后看电影的体验更好了。</p>
<h2 id="游戏篇">游戏篇</h2>
<p> #Ingress #皇室战争 #MineCraft #暗黑3</p>
<ul>
  <li>今年还偶尔会进Ingress里转转，暑假的时候变成了军火商，在淘宝卖了不少游戏道具；</li>
  <li>沉迷了几个月皇室战争，玩竞技类游戏始终让我感觉很痛苦，特别是这类付费手游，所以最终还是决定放弃竞技游戏；</li>
  <li>之后玩了一段时间Mine Craft，是一款很不错的游戏，感觉可以wan shang；</li>
  <li>最近两个月为了找回曾经玩电脑游戏的那种快乐，买了暗黑3，装在新mac pro上，进度比较慢，不过估计未来还会玩一段时间；</li>
  <li>今年一直对PS和VR眼镜蠢蠢欲动，估计下次有机会就下手了。</li>
</ul>
<h2 id="剁手篇">剁手篇</h2>
<ul>
  <li>
    <p>HHKB Professlonal 2：去年买了一个白色无刻印放在单位，在家李用电脑感觉各种不习惯，眼看着人民币贬值，越来越贵，最终还是又买了一个回来，这样家里的工作台就完美了。</p>
  </li>
  <li>
    <p>投影仪：大幅度的提升幸福感，没有买各种国产智能投影仪，感觉两三千块拥有这么功能画面和亮度一定不会特别理想，最后买了一款Sony的低端投影，没有内置系统，没有音箱，没有3D，外接了电视盒子和蓝牙音箱，体验蛮好，缺点是噪音有些大，看节目的时候可以忽略不计。</p>
  </li>
  <li>
    <p>打印机：总会有很多时候需要去打印社或者公司打印、扫描一些东西，后来想一想还是买了，三四百块钱还是无线的，很方便。</p>
  </li>
  <li>
    <p>Apple TV：在香港顺手买的，体验很好，可以在国内实在没有太多用途，挂闲鱼卖掉了。</p>
  </li>
  <li>
    <p>Iphone SE，Iphone 6：上半年终于买了自己的第一部Iphone，到手没到一周去音乐节被扒走了，郁闷了两周之后又入了低配的Iphone 6，入了苹果的坑就很难换别的产品了，另外，16G真的不够用，不够用，不够用。</p>
  </li>
  <li>
    <p>NAS：一方面换了mac之后磁盘空间十分紧张，另一方面也感觉有一些数据很重要，比如代码、照片、文档之类的，需要有安全的备份机制，所以买了nas，两块硬盘做raid，设置了time machine，以后再也不用担心电子设备丢掉或者磁盘坏掉，还买了个PT账号，里面的小电影已经多的看不过来了。</p>
  </li>
  <li>
    <p>另外还入了登山鞋一双、皮鞋一双、电脑背包和新的眼镜，终于舍得去买一些自己很喜欢的东西了。</p>
  </li>
</ul>
<h2 id="其他的碎碎念">其他的碎碎念</h2>
<ul>
  <li>拿到了本科毕业证，在等学位证</li>
  <li>淘宝店被给了两个恶意差评，被勒索，客服拒绝受理相关投诉</li>
  <li>去年过年老板给发了200块钱红包 #大SB</li>
  <li>去年过年没赶上航班</li>
  <li>今年坐了好多好多好多次飞机</li>
  <li>今年仍然没买到春运的火车票 #票贩子越来越专业</li>
  <li>大公司政治水很深</li>
  <li>乌龟挺健康，但是背甲角质化很严重，买了各种食物来补充营养</li>
  <li>种了几次花花草草都没发芽</li>
  <li>uber hackthon 被队友坑</li>
  <li>自己的一些小项目还是搁置状态</li>
  <li>发现自己可能再也买不起北京的房子</li>
  <li>想成为老司机但是不想买车</li>
  <li>已经9个月没有剪头发</li>
  <li>了解了一下开超市相关的事情</li>
  <li>最近在了解猎头行业</li>
</ul>
<h2 id="2017想做些什么">2017想做些什么</h2>
<ul>
  <li>学射箭</li>
  <li>好好练习一下单板</li>
  <li>清明去新加坡的机票已经买好</li>
  <li>去欧美看一看</li>
  <li>考摩托驾照</li>
  <li>练车，这很重要</li>
  <li>修牙</li>
  <li>英语口语和单词量</li>
  <li>蛙泳要更快，自由泳可以以后再学</li>
  <li>这是工作的第十个年头</li>
  <li>C语言要继续学下去</li>
  <li>在技术上要有输出和积累</li>
  <li>要考虑结婚生娃，为了人类</li>
  <li>口琴要继续练</li>
</ul>
<p>以上，应该就是今年的总结，有些混乱，因为做过的事情和想做的事情实在太多，希望能尽可能都记录下来，这对我来说很重要。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>这一年对我来说又是一个丰富多彩的一年，过去很长一段时间因为种种原因没有再静下心来写一些什么，所以这次一定要把这一篇写完，不希望2016年的总结和前几年一样不了了之。</p>
<h2 id="工作篇">工作篇</h2>
<p> #友宝 #裁员 #优酷 #阿里 #996</p>]]>
    </summary>
    
      <category term="总结" scheme="https://blog.foolbird.net/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Screeps新手游戏指南]]></title>
    <link href="https://blog.foolbird.net/5004.html"/>
    <id>https://blog.foolbird.net/5004.html</id>
    <published>2015-12-11T08:00:00.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
  <p>一款玩着玩着就变成JavaScript大神的游戏。</p>
  <p>一款可以增加你赚钱能力的游戏。</p>
</blockquote>
<p>在写下这段文字的时候，我已经删除了这个游戏里所有的数据，因为这个游戏消耗了我太多时间，本着纪念这段游戏经历的目地，我写了这篇文章。</p>
<h2 id="什么是Screeps？">什么是Screeps？</h2>
<p><img src="//blog.foolbird.net/wp-content/uploads/2015/12/whats_screeps.jpg" alt="The world&#39;s first MMO strategy open world game for programmers."></p>
<p><a href="http://screeps.com" target="_blank" rel="external">http://screeps.com</a></p>
<p>官方这样定义这款游戏：第一款针对开发者的大型多人在线开放策略游戏。而对于这款游戏，很多报道里会提到：”最难“，”战术沙盒“等概念。</p>
<p>是的没错，screeps就是这样一款游戏，一款需要编写代码才能玩的在线策略游戏。玩家需要在游戏中编写javascript代码来控制所有的游戏行为。比如：</p>
<p>查找并攻击敌人</p>
<figure class="highlight sqf">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td>
      <td class="code"><pre><span class="line">enemy = creep.pos.findClosestByRange(FIND_HOSTILE_CREEPS); <span class="comment">// 找到距离最近的敌人</span></span><br><span class="line"><span class="keyword">if</span> (creep.attack(enemy) == ERR_NOT_IN_RANGE) &#123; <span class="comment">// 攻击敌人</span></span><br><span class="line">  creep.<span class="built_in">moveTo</span>(enemy); <span class="comment">// 如果距离不够则向敌人移动</span></span><br><span class="line">&#125;</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>找到能量矿并采集</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td>
      <td class="code"><pre><span class="line">sources = creep.room.find(FIND_SOURCES); <span class="comment">// 找到房间里所有的能量矿</span></span><br><span class="line"><span class="keyword">if</span> (creep.harvest(sources[<span class="number">0</span>]) == ERR_NOT_IN_RANGE) &#123; <span class="comment">// 采集能量</span></span><br><span class="line">  creep.moveTo(sources[<span class="number">0</span>]); <span class="comment">// 如果距离不够则向矿移动</span></span><br><span class="line">&#125;</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>你的代码会保存在游戏中，并且一直运行下去。游戏甚至给你提供了缓存，有代码提示的在线代码编辑器，控制台和完善的API文档。</p>
<h2 id="在游戏里都能做什么？">在游戏里都能做什么？</h2>
<ul>
  <li>发展基地</li>
  <li>生产工人和士兵</li>
  <li>采集资源</li>
  <li>攻击其他玩家</li>
  <li>建造防御设施</li>
  <li>和盟友互相支援</li>
</ul>
<h2 id="目前有哪些游戏元素">目前有哪些游戏元素</h2>
<ul>
  <li>两种资源:energy和power</li>
  <li>建筑:spawn,power spawn, extension,storage,road,wall,rampart,tower,observer,link</li>
  <li>四矿地图和Source Keeper</li>
  <li>control rank 和 power rank</li>
  <li>远程兵种，近战兵种，治疗兵种，混合兵种</li>
  <li>controller 房间等级，越高能造的建筑越多，上限8</li>
  <li>GCL 游戏等级，每一个等级可以多控制一个房间</li>
</ul>
<p>更多内容可以查看官方文档 <a href="http://support.screeps.com/" target="_blank" rel="external">http://support.screeps.com/</a></p>
<h2 id="Screeps收费嘛？">Screeps收费嘛？</h2>
<p>游戏中程序执行会消耗游戏中的CPU，每个月你可以免费获得600个CPU，如果优化的好，600个CPU可以很轻松的控制20个游戏单位，但是如果你想发展多基地或者进入排行榜，还是建议你购买CPU进行游戏，CPU的使用上限是每天300个，也就是说，这款游戏每天可能花掉你人民币0-6块钱。</p>
<h2 id="新人必须知道的">新人必须知道的</h2>
<ul>
  <li>你的基地叫做Spawn，你的工人和士兵叫做Creep</li>
  <li>你的代码每执行一次是一个tick，一个tick是2秒</li>
  <li>绿色的地方是泥地，如果不修路走过去比乌龟还慢，不是泥地也需要修路</li>
  <li>Creep有1500ticks的生命，可以使用spawn给Creep延长生命，但是并不建议这么做</li>
  <li>路每隔一段时间就会坏，需要经常修</li>
  <li>energy矿每300ticks刷新3000个，计算好你的WORK数量，5－6个就够了</li>
  <li>一定要有防御机制，任何人都可能攻击你，并且可以在几分钟内摧毁你的所有建筑，杀死你的所有Creep，而且并不需要有理由</li>
</ul>
<h2 id="游戏策略">游戏策略</h2>
<h3 id="如何提高工人效率？">如何提高工人效率？</h3>
<p>和现实中一样，明确的分工可以有效的提高工作效率，矿工专门采矿，运输工种专门运输，升级工人只负责升级，但由于CPU有限，你需要在效率和工人数量上进行权衡。</p>
<h3 id="如何节省CPU？">如何节省CPU？</h3>
<p>你可以像调试其他项目一样调试你的程序效率，找到那些CPU消耗很高的代码并且优化它们，官方文档上对每个方法的CPU消耗情况有详细的说明，对于新手，CPU最大的消耗在于查找目标和跨房间移动，解决这两个问题可以节省超过一半的CPU。</p>
<h3 id="应该选择什么样的房间进行游戏？">应该选择什么样的房间进行游戏？</h3>
<p>遵循一个原则：附近资源丰富并且容易防守</p>
<h3 id="移动速度是如何计算的？">移动速度是如何计算的？</h3>
<p>请参考 <a href="http://codepen.io/findoff/full/RPmqOd/" target="_blank" rel="external">http://codepen.io/findoff/full/RPmqOd/</a></p>
<h3 id="如何高效的修路">如何高效的修路</h3>
<ul>
  <li>合理修路可以节约1/4的creep花费，你只要有一半的MOVE就可以达到最大移动速度。</li>
  <li>只要有creep经过的地方都应该修路，有一个creep走的地方修一条，有多个creep走的地方修两条，如果非常多，就修很多条，但是不要到处修。</li>
</ul>
<h3 id="建筑的摆放有什么要注意的">建筑的摆放有什么要注意的</h3>
<ul>
  <li>storage：让从所有搬运工的走动距离最短，通常选择房间的正中央，让其他使用能量的建筑环绕在周围。</li>
  <li>extension：离storage要近，游戏中有各种个样的高效摆放方式。</li>
  <li>spawn：让所有的单位出去工作的距离最短，通常在中心附近。</li>
  <li>tower：分散在房间的各个角落，并且保证出口附近所有的位置都在10个距离以内，这样能做到最高效的升级围墙，防御敌人，修复建筑，但是要记住tower的效率没有工人高。</li>
  <li>wall和rampart：建议建在最外围，这样可以让最少的敌人进入房间，易于防守和维修，一个外围的围墙最多能被3个近距离单位＋4个远距离单位攻击，而一个内部的围墙可以被至少3个近距离单位＋十几个远距离单位围攻。</li>
</ul>
<h3 id="Link的使用">Link的使用</h3>
<ul>
  <li>用来代替搬运工运输资源</li>
  <li>用来当升级工人的扩展存储</li>
  <li>用来当小型的storage</li>
  <li>将link建造在外围rampart上可以实现在有围墙的情况下和其他玩家交换资源</li>
</ul>
<h3 id="你可能不知道的">你可能不知道的</h3>
<ul>
  <li>在有observer之前，你只能看到有你的单位的房间，我指的是代码里</li>
  <li>你可以帮助其他玩家建造和维修</li>
  <li>你可以帮助其他玩家升级Controller</li>
  <li>你可以把资源丢进其他玩家的storage</li>
  <li>rampart可以叠加在任何建筑上，千万别忘了给spawn、storage上rampart，wall上也可以放一个rampart</li>
  <li>renew一个creep并不划算，但是你可以在creep路过的时候顺便renew一下</li>
  <li>你可以用Grunt提交你的本地代码 <a href="http://support.screeps.com/hc/en-us/articles/203022512-Committing-local-scripts-using-Grunt" target="_blank" rel="external">http://support.screeps.com/hc/en-us/articles/203022512-Committing-local-scripts-using-Grunt</a></li>
</ul>
<p>我的全部游戏代码已经发布在Github上 <a href="https://github.com/m4ker/screeps" target="_blank" rel="external">https://github.com/m4ker/screeps</a></p>
<p><img src="//blog.foolbird.net/wp-content/uploads/2015/12/screeps_last_minute.jpg" alt="我在Screeps里的最后一分钟"></p>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
  <p>一款玩着玩着就变成JavaScript大神的游戏。</p>
  <p>一款可以增加你赚钱能力的游戏。</p>
</blockquote>
<p>在写下这段文字的时候，我已经删除了这个游戏里所有的数据，因为这个游戏消耗了我太多时间，本着纪念这段游]]>
    </summary>
    
      <category term="Screeps" scheme="https://blog.foolbird.net/tags/Screeps/"/>
    
      <category term="游戏" scheme="https://blog.foolbird.net/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[死磕JavaScript面向对象 - 定义对象]]></title>
    <link href="https://blog.foolbird.net/5003.html"/>
    <id>https://blog.foolbird.net/5003.html</id>
    <published>2015-12-07T02:00:00.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>近来发现JavaScript能做的事情越来越多，用的人也变多了，有太多的框架和模式都搞不清楚原理（早些年的prototype, yui, jQuery, 到后来的MVC，MVVM)，所以想深入的学习一下JavaScript。</p>
<p>经过一段时间的摸索，终于知道了ECMAScript的来龙去脉，而我对JavaScript的认知还停留在ES3上面。但对于ES3，也只知道一些简单的用法，看高手写代码竟然完全看不懂。</p>
<p>最近几天卡在了闭包和对象两个章节上，因为和其他语言差的太多，所以看了很多文章仍然还只是一直半解，对于一个函数作为一等公民的面向对象语言，搞不清楚对象的基本知识实在有些说不过去，所以决定对相关内容进行一次深入的整理。</p>
<h3 id="原始方式_1">原始方式 1</h3>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 1.js</span></span><br><span class="line"><span class="keyword">var</span> robot = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="comment">// var robot = &#123;&#125;;</span></span><br><span class="line">robot.height = <span class="string">'120cm'</span>;</span><br><span class="line">robot.weight = <span class="string">'50kg'</span>;</span><br><span class="line">robot.color  = <span class="string">'red'</span>;</span><br><span class="line">robot.say = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(string);</span><br><span class="line">&#125;</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>用这种方式是不是感觉有点怪？感觉不像一个整体，所以我们要用下面的方法把对象封装起来：</p>
<h3 id="原始方式_2">原始方式 2</h3>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 2.js</span></span><br><span class="line"><span class="keyword">var</span> robot = &#123;</span><br><span class="line">  height : <span class="string">'120cm'</span>,</span><br><span class="line">  weight : <span class="string">'50kg'</span>,</span><br><span class="line">  color : <span class="string">'blue'</span>,</span><br><span class="line">  say : <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(string);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>在JavaScript中，我们通常以以上两种方式创建对象，在实际开发过程中我们会遇到一些问题：</p>
<ul>
  <li>问题1: 没有办法识别对象的类型，因为我们创建的所有对象都是Object</li>
  <li>问题2: 创建多个对象很麻烦</li>
</ul>
<h3 id="工厂模式">工厂模式</h3>
<p>工厂模式用来解决代码重用的问题（问题2），可以用一个函数多次创建同一个结构的对象。
  <br>
  <figure class="highlight processing">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="comment">// 3.js</span></span><br><span class="line">function createRobot(<span class="variable">height</span>, weight, <span class="built_in">color</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="variable">height</span> : <span class="variable">height</span> + <span class="string">'cm'</span>,</span><br><span class="line">    weight : weight + <span class="string">'kg'</span>,</span><br><span class="line">    <span class="built_in">color</span>  : <span class="built_in">color</span>,</span><br><span class="line">    say    : function (string) &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var robot1 = createRobot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line">var robot2 = createRobot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(robot1.<span class="variable">height</span>,robot1.weight,robot1.<span class="built_in">color</span>); <span class="comment">// 100cm 50kg red</span></span><br><span class="line">console.<span class="built_in">log</span>(robot2.<span class="variable">height</span>,robot2.weight,robot2.<span class="built_in">color</span>); <span class="comment">// 120cm 60kg blue</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>这段代码看上去已经很好的解决了代码重用的问题，但是又产生了新问题：</p>
<ul>
  <li>问题3：多个同类型对象的方法被重复创建</li>
</ul>
<p>这里指的就是robot1.say和robot2.say方法，本是相同的函数却被声明了两次，体现在代码里就是：
  <br>
  <figure class="highlight sqf">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br></pre></td>
        <td class="code"><pre><span class="line">console.<span class="built_in">log</span>(robot1.<span class="built_in">say</span> === robot2.<span class="built_in">say</span>); <span class="comment">// false</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>为了解决这个问题，我们要把say方法拿到工厂外面单独进行定义。
  <br>
  <figure class="highlight javascript">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="comment">// 4.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line"><span class="comment">// var say = function(string) &#123;</span></span><br><span class="line">  <span class="built_in">console</span>.log(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRobot</span>(<span class="params">height, weight, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    height : height + <span class="string">'cm'</span>,</span><br><span class="line">    weight : weight + <span class="string">'kg'</span>,</span><br><span class="line">    color  : color,</span><br><span class="line">    say    : say</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> robot1 = createRobot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> robot2 = createRobot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(robot1.say === robot2.say); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1 <span class="keyword">instanceof</span> createRobot); <span class="comment">// false</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>这样我们就解决了问题3，say方法只被声明了一次，所有robot对象的say方法都指向同一个函数。</p>
<h3 id="构造函数">构造函数</h3>
<figure class="highlight processing">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 5.js</span></span><br><span class="line">function say(string) &#123;</span><br><span class="line"><span class="comment">// var say = function(string) &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(string);</span><br><span class="line">&#125;</span><br><span class="line">function Robot(<span class="variable">height</span>, weight, <span class="built_in">color</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.<span class="variable">height</span> = <span class="variable">height</span> + <span class="string">'cm'</span>;</span><br><span class="line">  <span class="keyword">this</span>.weight = weight + <span class="string">'kg'</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">color</span>  = <span class="built_in">color</span>;</span><br><span class="line">  <span class="keyword">this</span>.say    = say;</span><br><span class="line">&#125;</span><br><span class="line">var robot1 = <span class="keyword">new</span> Robot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line">var robot2 = <span class="keyword">new</span> Robot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(robot1.<span class="variable">height</span>,robot1.weight,robot1.<span class="built_in">color</span>); <span class="comment">// 100cm 50kg red</span></span><br><span class="line">console.<span class="built_in">log</span>(robot2.<span class="variable">height</span>,robot2.weight,robot2.<span class="built_in">color</span>); <span class="comment">// 120cm 60kg blue</span></span><br><span class="line">console.<span class="built_in">log</span>(robot1.say === robot2.say); <span class="comment">// true</span></span><br><span class="line">console.<span class="built_in">log</span>(robot1 <span class="keyword">instanceof</span> <span class="keyword">Object</span>);  <span class="comment">// true</span></span><br><span class="line">console.<span class="built_in">log</span>(robot1 <span class="keyword">instanceof</span> Robot);   <span class="comment">// true</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>构造函数看上去更像其他语言中的面向对象，并且解决了问题1，可以识别对象的类型。</p>
<h3 id="原型模式">原型模式</h3>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 6.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Robot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Robot.prototype.height = <span class="string">'120cm'</span>;</span><br><span class="line">Robot.prototype.weight = <span class="string">'60kg'</span>;</span><br><span class="line">Robot.prototype.color  = <span class="string">'blue'</span>;</span><br><span class="line">Robot.prototype.parts  = [<span class="string">'body'</span>];</span><br><span class="line">Robot.prototype.say    = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> robot1 = <span class="keyword">new</span> Robot();</span><br><span class="line"><span class="keyword">var</span> robot2 = <span class="keyword">new</span> Robot();</span><br><span class="line"><span class="built_in">console</span>.log(robot1.height); <span class="comment">// 120cm</span></span><br><span class="line"><span class="built_in">console</span>.log(robot2.height); <span class="comment">// 120cm</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1 <span class="keyword">instanceof</span> Robot);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1.say === robot2.say); <span class="comment">// true</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>这里可以看到，使用原型模式使得robot1和robot2公用了同一套属性值和方法。并且可以正确识别对象类型。</p>
<p>接下来我又尝试了对实例的属性进行修改
  <br>
  <figure class="highlight javascript">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="built_in">console</span>.log(robot1.hasOwnProperty(<span class="string">'height'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(robot2.hasOwnProperty(<span class="string">'height'</span>)); <span class="comment">// false</span></span><br><span class="line">robot1.height = <span class="string">'100cm'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(robot1.height); <span class="comment">// 100cm</span></span><br><span class="line"><span class="built_in">console</span>.log(robot2.height); <span class="comment">// 120cm</span></span><br><span class="line"><span class="built_in">console</span>.log(robot1.hasOwnProperty(<span class="string">'height'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(robot2.hasOwnProperty(<span class="string">'height'</span>)); <span class="comment">// false</span></span><br><span class="line">robot1.say = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Ah...'</span> + string);</span><br><span class="line">&#125;;</span><br><span class="line">robot1.say(<span class="string">'hello world'</span>); <span class="comment">// Ah...hello world</span></span><br><span class="line">robot2.say(<span class="string">'hello world'</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="keyword">delete</span> robot1.say;</span><br><span class="line">robot1.say(<span class="string">'hello world'</span>); <span class="comment">// hello world</span></span><br><span class="line">robot2.say(<span class="string">'hello world'</span>); <span class="comment">// hello world</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>这段代码说明了，实例上定义的属性／方法会屏蔽掉原型上的同名属性／方法，而在delete掉实例上的方法后，原型上的方法在实例上又恢复可用了。但是我遇到了一个例外：
  <br>
  <figure class="highlight prolog">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="atom">console</span>.<span class="atom">log</span>(<span class="atom">robot1</span>.<span class="atom">parts</span>, <span class="atom">robot2</span>.<span class="atom">parts</span>); // [ <span class="string">'body'</span> ] [ <span class="string">'body'</span> ]</span><br><span class="line"><span class="atom">robot1</span>.<span class="atom">parts</span>.<span class="atom">push</span>(<span class="string">'arm'</span>);</span><br><span class="line"><span class="atom">console</span>.<span class="atom">log</span>(<span class="atom">robot1</span>.<span class="atom">parts</span>, <span class="atom">robot2</span>.<span class="atom">parts</span>); // [ <span class="string">'body'</span>, <span class="string">'arm'</span> ] [ <span class="string">'body'</span>, <span class="string">'arm'</span> ]</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>对robot1属性的修改同时影响了robot2, 这说明对于数组的修改是发生在原型上的，这并不是我想要得到的效果。</p>
<ul>
  <li>问题4: 对于原型上数组属性的修改影响到了其他实例</li>
</ul>
<p>《JavaScript 高级程序设计》对原型链进行了详细的解读，当然上面这个问题就是这本书里讲到的，并且还讲了下面一些内容：</p>
<h4 id="1-_创建构造函数的时候发生了什么？">1. 创建构造函数的时候发生了什么？</h4>
<ol>
  <li>在创建任何函数的时候，JavaScript都会创建一个原型对象，并且将函数的prototype属性指向该原型对象</li>
  <li>原型对象会有一个constructor属性，指向该函数</li>
  <li>而原型对象的__proto__属性，指向Object.prototype</li>
  <li>Object.prototype.constructor 指向 Object 函数</li>
  <li>Object.prototype是原型链最顶层，没有__proto__属性</li>
</ol>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 7.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype);             <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myFunc.prototype);      <span class="comment">// object , 证明1</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.constructor); <span class="comment">// [Function: myFunc] ，证明2</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__);   <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true，证明3</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__.constructor); <span class="comment">// [Function: Object]，证明4</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__.__proto__); <span class="comment">// null，证明5</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p><img src="//blog.foolbird.net/wp-content/uploads/2015/12/1.png" alt="创建构造函数时的原型链"></p>
<h4 id="2-_使用new进行实例化之后发生了什么？">2. 使用new进行实例化之后发生了什么？</h4>
<ol>
  <li>基于构造函数创建了一个实例对象</li>
  <li>该实例对象的__proto__属性指向构造函数的prototype属性</li>
  <li>该实例对象的constructor指向构造函数 // todo： 这部分要放到图片里吗？</li>
  <li>原型链其他部分未发生变化</li>
</ol>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> myFunc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> myFunc); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myObj.constructor); <span class="comment">// [Function: myFunc]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj.__proto__ == myFunc.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype);             <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myFunc.prototype);      <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.constructor); <span class="comment">// [Function: myFunc]</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__);   <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__.constructor); <span class="comment">// [Function: Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__.__proto__); <span class="comment">// null</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p><img src="//blog.foolbird.net/wp-content/uploads/2015/12/2.png" alt="实例化对象时的原型链"></p>
<h4 id="3-_属性／方法调用的内部流程是怎么样的？">3. 属性／方法调用的内部流程是怎么样的？</h4>
<ol>
  <li>在实例中找</li>
  <li>如果没找到，去__proto__里找</li>
  <li>如果没找到，去__proto__.__proto__里找</li>
  <li>如果__proto__为null，说明已经到达了原型链的最顶级，也就是Object.prototype，属性／方法在原型链上未定义，返回undefined</li>
</ol>
<h4 id="4-_重新定义原型链的时候遇到的问题">4. 重新定义原型链的时候遇到的问题</h4>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 8.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> myFunc();</span><br><span class="line"></span><br><span class="line">myFunc.prototype = &#123;</span><br><span class="line">  say:<span class="function"><span class="keyword">function</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(string);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj.say(<span class="string">'hello world'</span>); <span class="comment">// TypeError: undefined is not a function</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>这看上去很难理解，因为重写构造方法的原型并不会删掉之前的原型，也不会改变实例和原型之间的关系，所以我们又发现了一个问题</p>
<ul>
  <li>问题5：重新定义prototype会切断原型链，并且你会发现constructor也不见了。</li>
</ul>
<p><img src="//blog.foolbird.net/wp-content/uploads/2015/12/2.png" alt="重新定义原型前的原型链">
  <br><img src="//blog.foolbird.net/wp-content/uploads/2015/12/3.png" alt="重新定义原型后的原型链"></p>
<p>所以如果想要完美的重写prototype需要这样：</p>
<figure class="highlight typescript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 9.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> myFunc;</span><br><span class="line"></span><br><span class="line">myFunc.prototype = &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span> : myFunc,</span><br><span class="line">  // __proto__ 会自动创建并指向 Object.prototype</span><br><span class="line">  say: function(string) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">string</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> myFunc); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__ == myObj.__proto__.__proto__); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">myObj.__proto__ = myFunc.prototype;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> myFunc); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myObj <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.prototype.__proto__ == myObj.__proto__.__proto__); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">myObj.say(<span class="string">'hello world'</span>);</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>除了上面这些问题，其实原型模式还有一个问题：</p>
<ul>
  <li>问题6: 原型模式的构造函数没有参数</li>
</ul>
<h3 id="混合构造函数&amp;原型模式">混合构造函数&amp;原型模式</h3>
<p>为了解决问题4和问题6，就出现和混合构造函数&amp;原型模式
  <br>
  <figure class="highlight javascript">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="comment">// 10.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Robot</span>(<span class="params">height, weight, color</span>) </span>&#123; <span class="comment">// 问题6解决</span></span><br><span class="line">  <span class="keyword">this</span>.height = height + <span class="string">'cm'</span>;</span><br><span class="line">  <span class="keyword">this</span>.weight = weight + <span class="string">'kg'</span>;</span><br><span class="line">  <span class="keyword">this</span>.color  = color;</span><br><span class="line">  <span class="keyword">this</span>.parts  = [<span class="string">'body'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Robot.prototype.say    = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> robot1 = <span class="keyword">new</span> Robot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> robot2 = <span class="keyword">new</span> Robot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(robot1);</span><br><span class="line"><span class="comment">/*</span><br><span class="line">&#123; height: '100cm',</span><br><span class="line">  weight: '50kg',</span><br><span class="line">  color: 'red',</span><br><span class="line">  parts: [ 'body' ] &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(robot2);</span><br><span class="line"><span class="comment">/*</span><br><span class="line">&#123; height: '120cm',</span><br><span class="line">  weight: '60kg',</span><br><span class="line">  color: 'blue',</span><br><span class="line">  parts: [ 'body' ] &#125;</span><br><span class="line"> */</span></span><br><span class="line">robot1.parts.push(<span class="string">'arm'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(robot1.parts,robot2.parts); <span class="comment">// [ 'body', 'arm' ] [ 'body' ], 问题4解决</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="动态原型模式">动态原型模式</h3>
<p>为了让代码看上去更美观一点儿，又有了动态原型模式：
  <br>
  <figure class="highlight javascript">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="comment">// 11.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Robot</span>(<span class="params">height, weight, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height + <span class="string">'cm'</span>;</span><br><span class="line">  <span class="keyword">this</span>.weight = weight + <span class="string">'kg'</span>;</span><br><span class="line">  <span class="keyword">this</span>.color  = color;</span><br><span class="line">  <span class="keyword">this</span>.parts  = [<span class="string">'body'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Robot.prototype.say === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// if (Robot.say === undefined) &#123; // 这样不行, 会重复执行，why?</span></span><br><span class="line">  <span class="comment">// if (this.prototype.say === undefined) &#123; // 这样也不行, TypeError: Cannot read property 'say' of undefined，why？</span></span><br><span class="line">    Robot.prototype.say    = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(string);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> robot1 = <span class="keyword">new</span> Robot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> robot2 = <span class="keyword">new</span> Robot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(robot1.say === robot2.say);</span><br><span class="line">robot1.say(<span class="string">'hello world'</span>);</span><br><span class="line">robot2.say(<span class="string">'hello world'</span>);</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="混合工厂模式/寄生构造函数模式">混合工厂模式/寄生构造函数模式</h3>
<figure class="highlight processing">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="comment">// 12.js</span></span><br><span class="line">function createRobot(<span class="variable">height</span>, weight, <span class="built_in">color</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="variable">height</span> : <span class="variable">height</span> + <span class="string">'cm'</span>,</span><br><span class="line">    weight : weight + <span class="string">'kg'</span>,</span><br><span class="line">    <span class="built_in">color</span>  : <span class="built_in">color</span>,</span><br><span class="line">    say    : function (string) &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var robot1 = <span class="keyword">new</span> createRobot(<span class="number">100</span>,<span class="number">50</span>,<span class="string">'red'</span>);</span><br><span class="line">var robot2 = <span class="keyword">new</span> createRobot(<span class="number">120</span>,<span class="number">60</span>,<span class="string">'blue'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(robot1.<span class="variable">height</span>,robot1.weight,robot1.<span class="built_in">color</span>); <span class="comment">// 100cm 50kg red</span></span><br><span class="line">console.<span class="built_in">log</span>(robot2.<span class="variable">height</span>,robot2.weight,robot2.<span class="built_in">color</span>); <span class="comment">// 120cm 60kg blue</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>W3School和《JavaScript 高级程序设计》中都提到了这样一种模式，而且还都说明了不推荐这样使用。这里让我很想不明白，从代码上看，和工厂模式没有区别，只是实例化的时候使用了new关键字，但是实例化的时候new并没有生效，个人理解这种方式的工作原理和工厂模式是一样的，所以也和工厂模式有着同样的问题。</p>
<p>（未完待续）</p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>近来发现JavaScript能做的事情越来越多，用的人也变多了，有太多的框架和模式都搞不清楚原理（早些年的prototype, yui, jQuery, 到后来的MVC，MVVM)，所以想深入的学习一下JavaScript。</p>
]]>
    </summary>
    
      <category term="JavaScript" scheme="https://blog.foolbird.net/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="https://blog.foolbird.net/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[经典问题再解读：不用中间变量交换两个变量的值]]></title>
    <link href="https://blog.foolbird.net/5002.html"/>
    <id>https://blog.foolbird.net/5002.html</id>
    <published>2015-12-06T09:00:00.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>大概八年前，写过这样一篇文章：<a href="//blog.foolbird.net/331.html">不使用中间变量来交换变量的值</a>，后来面试的时候常常遇到这题，最近翻出来看，发现当时对这个问题的理解不够深刻，所以今天又整理了一下。</p>
<h2 id="1-_一些有限制的方法">1. 一些有限制的方法</h2>
<h3 id="字符串版本">字符串版本</h3>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td>
      <td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">"a"</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">"b"</span>;</span><br><span class="line"><span class="variable">$a</span> .= <span class="variable">$b</span>; // a=ab, b=b</span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="variable">$b</span>, <span class="string">""</span>, <span class="variable">$a</span>); // a=ab, b=a</span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="variable">$b</span>, <span class="string">""</span>, <span class="variable">$a</span>); // a=b, b=a</span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td>
      <td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">"a"</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">"b"</span>;</span><br><span class="line"><span class="variable">$a</span> .= <span class="variable">$b</span>; // a=ab, b=b</span><br><span class="line"><span class="variable">$b</span> = substr(<span class="variable">$a</span>, <span class="number">0</span>, (strlen(<span class="variable">$a</span>) - strlen(<span class="variable">$b</span>))); // a=ab, b=a</span><br><span class="line"><span class="variable">$a</span> = substr(<span class="variable">$a</span>, strlen(<span class="variable">$b</span>)); // a=b, b=a</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>上面这两个方法使用了字符串替换和截取的方法，有一个限制就是只适用于字符串。</p>
<h3 id="加减法">加减法</h3>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="literal">a</span> = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">b = <span class="number">2</span><span class="comment">;</span></span><br><span class="line"><span class="literal">a</span> = <span class="literal">a</span> + b<span class="comment">; // a=3, b=2</span></span><br><span class="line">b = <span class="literal">a</span> - b<span class="comment">; // a=3, b=1</span></span><br><span class="line"><span class="literal">a</span> = <span class="literal">a</span> - b<span class="comment">; // a=2, b=1</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="literal">a</span> = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">b = <span class="number">2</span><span class="comment">;</span></span><br><span class="line"><span class="literal">a</span> = b - <span class="literal">a</span><span class="comment">; // a=1,b=2</span></span><br><span class="line">b = b - <span class="literal">a</span><span class="comment">; // a=1,b=1</span></span><br><span class="line"><span class="literal">a</span> = b + <span class="literal">a</span><span class="comment">; // a=2,b=2</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="乘除法">乘除法</h3>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="literal">a</span> = <span class="literal">a</span> * b<span class="comment">;</span></span><br><span class="line">b = <span class="literal">a</span> / b<span class="comment">;</span></span><br><span class="line"><span class="literal">a</span> = <span class="literal">a</span> / b<span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>用除法来解决这个问题，多了一个限制，b不能等于0</p>
<h3 id="一句话版本">一句话版本</h3>
<figure class="highlight armasm">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">a = <span class="keyword">b </span>+ <span class="number">0</span> * (<span class="keyword">b </span>= a)<span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight gcode">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">a = <span class="comment">(b - a)</span> + <span class="comment">(b = a)</span>;</span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight gcode">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">a = <span class="comment">(a + b)</span> - <span class="comment">(b = a)</span>;</span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight armasm">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">a = <span class="keyword">b </span>+ (<span class="keyword">b </span>= a) * <span class="number">0</span><span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>这些方法利用了表达式的返回值</p>
<p>所有的加减乘除的方法里有两方面限制：</p>
<ul>
  <li>只适用于数字</li>
  <li>如果变量是浮点数，会有精度上的损失</li>
</ul>
<blockquote>
  <p>看到网上有一些人提出适用＋和*的时候会导致结果向上溢出，但其实这并不影响结果，因为最后逆操作会产生一次向下溢出。</p>
</blockquote>
<h3 id="eval版">eval版</h3>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">eval(<span class="string">"a="</span>+b+<span class="string">";b="</span>+<span class="literal">a</span>)<span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>eval版本可能有两个问题</p>
<ul>
  <li>安全性</li>
  <li>是如果想支持更多的数据类型比较麻烦</li>
</ul>
<h3 id="异或版本">异或版本</h3>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td>
      <td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>=<span class="number">10</span>; //<span class="variable">$a</span>=<span class="number">1010</span></span><br><span class="line"><span class="variable">$b</span>=<span class="number">12</span>; //<span class="variable">$b</span>=<span class="number">1100</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$a</span>^<span class="variable">$b</span>; //<span class="variable">$a</span>=<span class="number">0110</span>,<span class="variable">$b</span>=<span class="number">1100</span></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>^<span class="variable">$b</span>; //<span class="variable">$a</span>=<span class="number">0110</span>,<span class="variable">$b</span>=<span class="number">1010</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$a</span>^<span class="variable">$b</span>; //<span class="variable">$a</span>=<span class="number">1100</span>=<span class="number">12</span>,<span class="variable">$b</span>=<span class="number">1010</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>下面是简化版本</p>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td>
      <td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> ^= <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> ^= <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> ^= <span class="variable">$b</span>;</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>异或适用于整数和字符串</p>
<h2 id="2-_适用于所有的数据类型，并且没有限制的方法">2. 适用于所有的数据类型，并且没有限制的方法</h2>
<h3 id="对象版">对象版</h3>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="label">a = &#123;a : b, b :</span> <span class="literal">a</span>&#125;<span class="comment">;</span></span><br><span class="line">b = <span class="literal">a</span>.b<span class="comment">;</span></span><br><span class="line"><span class="literal">a</span> = <span class="literal">a</span>.<span class="literal">a</span><span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="数组版">数组版</h3>
<figure class="highlight autohotkey">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="literal">a</span> = [<span class="literal">a</span>,b]<span class="comment">;</span></span><br><span class="line">b = <span class="literal">a</span>[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="literal">a</span> = <span class="literal">a</span>[<span class="number">1</span>]<span class="comment">;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight markdown">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">a = [<span class="link_label">b,b=a</span>][<span class="link_reference">0</span>];</span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="匿名函数版">匿名函数版</h3>
<figure class="highlight actionscript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td>
      <td class="code"><pre><span class="line">a=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    b = a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="PHP_版本">PHP 版本</h3>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line">list(<span class="variable">$var1</span>, <span class="variable">$var2</span>) = [<span class="variable">$var2</span>, <span class="variable">$var1</span>];</span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="Python&amp;Ruby版本">Python&amp;Ruby版本</h3>
<figure class="highlight livecodeserver">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="operator">a</span>,b = b,<span class="operator">a</span>;<span class="comment"> // python和ruby程序员都笑了：D</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="ES6_版本">ES6 版本</h3>
<figure class="highlight accesslog">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="string">[a,b]</span> = <span class="string">[b,a]</span>;</span><br></pre></td>
    </tr>
  </table>
</figure>
<h2 id="3-_总结一下">3. 总结一下</h2>
<p>解决这个问题的基本思想有以下几种：</p>
<ul>
  <li>
    <p>将两个变量同时放入其中一个变量，再分别取出，例如字符串版本，数组版本，对象版本</p>
  </li>
  <li>
    <p>将两个变量通过某种计算的结果放入其中一个变量，再用计算结果和另一个已知变量逆向取回结果，例如异或版本和一部分加减乘除的版本</p>
  </li>
  <li>
    <p>利用语言特性，例如eval版本，匿名函数版本，php版本和python&amp;ruby版本</p>
  </li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<p>大概八年前，写过这样一篇文章：<a href="//blog.foolbird.net/331.html">不使用中间变量来交换变量的值</a>，后来面试的时候常常遇到这题，最近翻出来看，发现当时对这个问题的理解不够深刻，所以今天又整理了一下。</p>
<h2 id="1-]]>
    </summary>
    
      <category term="算法" scheme="https://blog.foolbird.net/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress到hexo搬家小记]]></title>
    <link href="https://blog.foolbird.net/5001.html"/>
    <id>https://blog.foolbird.net/5001.html</id>
    <published>2015-12-03T02:14:30.000Z</published>
    <updated>2015-12-04T03:32:27.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
  <p>WordPress是一个以PHP和MySQL为平台的自由开源的博客软件和内容管理系统。WordPress具有插件架构和模板系统。Alexa排行前100万的网站中有超过16.7%的网站使用WordPress。到了2011年8月，约22%的新网站采用了WordPress。WordPress是目前因特网上最流行的博客系统。</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>从08年开始玩WordPress，着迷于她的强大和灵活，臣服于她强大的themes机制和plugins机制。当是还有不少博客专门研究wordpress，我也曾经深入的研究过其中的一些原理，还开发了sablog-x转wordpress的工具。</p>
<h2 id="我为什么要放弃WordPress？">我为什么要放弃WordPress？</h2>
<p>时过境迁，不再是曾经意气风发的少年，折腾的少了，内容更新也缓慢，由于WordPress太过庞大，插件质量也参差不齐，导致WordPress出现过很多的漏洞，经常发现内容被篡改，文件被篡改，被垃圾评论骚扰，甚至有些内容被改丢了，而发现的时候可能已经过去几个月了。</p>
<h2 id="我为什么选择hexo？">我为什么选择hexo？</h2>
<ul>
  <li>
    <p>其实最主要的原因，是最近开始关注Node，而hexo是目前最流行的Node博客系统。而为什么关注Node，说来话长，这可能要从PHP为什么是“最好的语言”开始说起，而我不得不承认JavaScript将成为下一个“最好的语言”。</p>
  </li>
  <li>
    <p>生成纯静态网站，可以直接发布到Github，几乎不存在性能问题和安全问题，而那些你觉得不可能静态化的内容，用服务就好了，比如：评论、搜索</p>
  </li>
  <li>
    <p>基于Markdown文件的博客系统，Markdown让写作更美好，曾起何时我也有过这样一个想法，想开发一个基于文本的博客系统，不过最终没有开发完那个系统，后来我用那个思想开发了 <a href="http://qltx.cn" target="_blank" rel="external">http://qltx.cn</a> ，里面有一个从目录文件生成数据的算法。</p>
  </li>
  <li>
    <p>轻量，有完善的中文文档 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a> ，作者是台湾开发者@tommy351</p>
  </li>
</ul>
<h2 id="迁移过程">迁移过程</h2>
<p>这里并不想写安装过程，安装步骤可以去官方看文档，简单记录一下数据迁移过程中遇到的一些问题</p>
<ul>
  <li>
    <p>npm 安装速度慢，经常卡住，遇到这种情况可以把vpn调整到全局模式重试</p>
  </li>
  <li>
    <p>数据转换官方提供了migration插件，通过命令行导入wordpress是非常快的，不过转换完毕后我的hexo就无法访问了，这种情况通常是因为文章中的某些字符无法解析，排除法找到那篇文章处理一下就可以了。</p>
  </li>
  <li>
    <p>hexo中的分类和WordPress中的分类不同，一篇文章只能属于一个分类，所以要调整所有文章的分类内容</p>
  </li>
  <li>
    <p>官方推荐的很多theme安装后都无法使用，这是版本兼容性的问题</p>
  </li>
  <li>
    <p>迁移过来之后WordPress中的附件需要处理，我的做法是把整个wp-content目录原样放到了public目录下，这会有一个问题，就是每次generate都会被清理掉，所以更好的办法是放到第三方</p>
  </li>
  <li>
    <p>评论使用disqus，注册完毕要验证邮箱，创建app，并且要设置安全域名，这样才能成功加载，在disqus中导入WordPress的备份数据可以完成评论的迁移</p>
  </li>
  <li>
    <p>WordPress中的gallery标签在hexo中全部失效，可以用hexo中的photos属性，因为缩略图布局的缘故，所以我改动了theme，增加了一个wpphotos属性，并且用脚本将WordPress中的gallery全部转成了url,caption的格式</p>
  </li>
  <li>
    <p>后期我对默认theme做了大量的改动，如果想找到更多的themes，可以去官网或者看这篇文章 <a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></p>
  </li>
</ul>
<h2 id="说点儿题外话">说点儿题外话</h2>
<p>在迁移的过程中我又重新整理了我写过的所有文章，一共有500多篇，感慨自己曾经的执着、稚嫩，而那大概400篇文章，将永远沉睡在草稿中。</p>
<p>从我第一次搭建博客到现在已经有10个年头，维护这个网站花掉了我大量的精力，几乎伴随着我整个大学时代和职业生涯，甚至还有高中的一段时间，从一个技术小白到一名web工程师，我在整个过程中学到了非常多的技术知识，也对人生有了很多新的感悟，虽然这里并没有写出特别好的技术类文章。</p>
<p>如果说有什么东西见证过我的青春，那一定就是这里。</p>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
  <p>WordPress是一个以PHP和MySQL为平台的自由开源的博客软件和内容管理系统。WordPress具有插件架构和模板系统。Alexa排行前100万的网站中有超过16.7%的网站使用WordPress。到了2011年8月，约22%的新网站采]]>
    </summary>
    
      <category term="WordPress" scheme="https://blog.foolbird.net/tags/WordPress/"/>
    
      <category term="hexo" scheme="https://blog.foolbird.net/tags/hexo/"/>
    
      <category term="迁移" scheme="https://blog.foolbird.net/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[公益项目志愿者招募(PHP,UI)]]></title>
    <link href="https://blog.foolbird.net/4590.html"/>
    <id>https://blog.foolbird.net/4590.html</id>
    <published>2015-09-18T07:32:30.000Z</published>
    <updated>2016-02-03T03:58:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="我们是谁？">我们是谁？</h2>
<blockquote>
  <p><a href="http://www.go9999.com" target="_blank" rel="external">中国•支教联盟(CNAEF)</a>，创办于2006年4月。由自愿支持农村中小学教育的社会各界爱心人士自发组织的全国性民间公益机构。以联系和提供支教为主题，主要发布支教信息，传播贫困地区教育现状，共同关注孩子成长。自成立以来，长期致力于为发达地区爱心咨询寻找资助对象，为欠发达地区教育引入社会各界力量。</p>
</blockquote>
<h2 id="我们要做什么？">我们要做什么？</h2>
<p>我们想继续完善一下我们的网站，如果有可能会有自己的博客和手机应用，我们都是业余的志愿者，每个人都不能在这个事情上花上很多时间，所以，我们需要你的加入。</p>
<p>你最好有以下一种或多种技能：</p>
<ul>
  <li>能做一些简单web页面</li>
  <li>能写一些PHP代码，最好用过一些框架</li>
  <li>能写一些JavaScript脚本</li>
  <li>会用git或者想学习如何使用git</li>
  <li>能够开发简单的手机app（android/ios不限）</li>
</ul>
<p>如果你是个大牛当然最好，如果你是个菜鸟，我们会提供全方位的技术指导。需要强调的是：<strong>我们不能提供报酬</strong>，不过欢迎各位来北京约饭。</p>
<h2 id="我的联系方式">我的联系方式</h2>
<ul>
  <li>QQ 35650697</li>
  <li>makerwang#gmail.com</li>
  <li>也可以加入我们的QQ群：249822315</li>
</ul>
<h2 id="相关链接">相关链接</h2>
<p>中国支教联盟官方网站：<a href="http://www.go9999.com" target="_blank" rel="external">http://www.go9999.com</a></p>
<p>中国支教联盟代码仓库：<a href="https://github.com/CNAEF" target="_blank" rel="external">https://github.com/CNAEF</a></p>
<p>关于我的支教经历请移步：<a href="//blog.foolbird.net/4503.html">https://blog.foolbird.net/4503.html</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="我们是谁？">我们是谁？</h2>
<blockquote>
  <p><a href="http://www.go9999.com" target="_blank" rel="external">中国•支教联盟(CNAEF)</a>，创办于2006年4月。由自愿]]>
    </summary>
    
      <category term="公益" scheme="https://blog.foolbird.net/tags/%E5%85%AC%E7%9B%8A/"/>
    
      <category term="招募" scheme="https://blog.foolbird.net/tags/%E6%8B%9B%E5%8B%9F/"/>
    
      <category term="支教" scheme="https://blog.foolbird.net/tags/%E6%94%AF%E6%95%99/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[说说PHP在Web上的运行模式]]></title>
    <link href="https://blog.foolbird.net/4582.html"/>
    <id>https://blog.foolbird.net/4582.html</id>
    <published>2015-07-17T09:45:10.000Z</published>
    <updated>2015-12-03T05:34:41.000Z</updated>
    <content type="html"><![CDATA[<p>在各种环境上配置过无数次运行环境之后，我们好像还是搞不清PHP到底是怎么被执行的以及在不同的环境中有什么区别，曾经还和一个架构师因为PHP到底有几种运行模式这个事儿理论过，所以今天花一点时间研究一下。</p>
<h2 id="一-_常见的运行模式">一. 常见的运行模式</h2>
<h3 id="在Apache中，PHP通常有以下3种运行模式：">在Apache中，PHP通常有以下3种运行模式：</h3>
<ol>
  <li>CGI</li>
  <li>apache2handler(mod_php)</li>
  <li>FastCGI</li>
</ol>
<h3 id="在IIS中，PHP通常有以下3种运行模式：">在IIS中，PHP通常有以下3种运行模式：</h3>
<ol>
  <li>CGI</li>
  <li>ISAPI</li>
  <li>FastCGI</li>
</ol>
<p>在Nginx中，默认支持的模式只有 FastCGI。</p>
<h2 id="二-_那么问题来了，到底什么是CGI，什么是FastCGI还有ISAPI">二. 那么问题来了，到底什么是CGI，什么是FastCGI还有ISAPI</h2>
<h3 id="CGI">CGI</h3>
<p>CGI 全称 Common Gateway Interface， 中文是“通用网关接口”，在维基百科上的说明是这样的：</p>
<blockquote>
  <p>CGI描述了客户端和服务器程序之间传输数据的一种标准。
    <br>但实际上这个说明是有明显<strong>歧义</strong>的，不利于我们理解CGI这个概念，百度百科上的说明是这样的：
    <br>CGI是外部应用程序（CGI程序）与Web服务器之间的接口标准，是在CGI程序和Web服务器之间传递信息的规程。
    <br>简单的说，CGI规定了Web服务器程序如何调用PHP（或者其他程序），以及PHP该如何响应服务器程序的调用。</p>
</blockquote>
<h3 id="FastCGI">FastCGI</h3>
<p>解释FastCGI之前必须要了解CGI的运行原理，Web服务器每次接收到CGI请求都要去创建（fork）一个PHP进程，然后执行程序，返回结果，再销毁进程，网上把这种执行模式叫做fork-and-execute。</p>
<p>而这种执行模式的问题在于，每次都要消耗大量的系统资源去创建和销毁PHP进程。所以就出现了FastCGI标准，FastCGI通常是一个进程管理器，他会初始化很多PHP进程，如果服务器发来CGI请求，进程管理器会把这个请求分配到其中一个PHP进程，返回结果后并不销毁进程，而是等待下一次分配请求。</p>
<p>我们常用的PHP-FPM实际上是一个实现了FastCGI标准的进程管理器，另外还有PHP-CGI也是。</p>
<h3 id="Apache2handler">Apache2handler</h3>
<p>这是我们在Linux下部署环境常用的一种模式，也是Apache默认的模式，Apache通过mod_php5模块来调用PHP。</p>
<p>Apache中还有一个模式的概念，一般指的是prefork，worker，event，不过这和我们这里要研究的PHP运行模式没有太大关系，其实PHP-FPM也有几种不同的工作模式，这样说下去天要黑了。</p>
<h3 id="ISAPI">ISAPI</h3>
<p>好吧，其实我从来没接触过ISAPI，这是微软设计的一套CGI标准，只适用于Windows平台。</p>
<p>在PHP源码中的sapi目录还有<strong>cli</strong>，<strong>phpdbg</strong>，<strong>embed，litespeed</strong>等执行模式，不过都是web之外的东西。关于这些不同的运行模式的区别与优劣，其实是个很深奥的学问，待我研究明白再和大家娓娓道来。</p>
<p>参考：<a href="http://segmentfault.com/q/1010000000256516" target="_blank" rel="external">http://segmentfault.com/q/1010000000256516</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>在各种环境上配置过无数次运行环境之后，我们好像还是搞不清PHP到底是怎么被执行的以及在不同的环境中有什么区别，曾经还和一个架构师因为PHP到底有几种运行模式这个事儿理论过，所以今天花一点时间研究一下。</p>
<h2 id="一-_常见的运行模式">一. 常见的运行模式</]]>
    </summary>
    
      <category term="php" scheme="https://blog.foolbird.net/tags/php/"/>
    
      <category term="模式" scheme="https://blog.foolbird.net/tags/%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mkdir的前世今生]]></title>
    <link href="https://blog.foolbird.net/4569.html"/>
    <id>https://blog.foolbird.net/4569.html</id>
    <published>2015-05-05T12:50:57.000Z</published>
    <updated>2015-11-30T15:12:40.000Z</updated>
    <content type="html"><![CDATA[<p>前几日有同事询问我Yii2中是否有封装递归创建目录的方法，我告知了他CFileHelper的用法，对这个事情我从未有过怀疑，任何成熟的框架必然会封装各种文件操作的方法，但过后我寻思良久，mkdir明明有$recursive参数，为何所有的框架都要封装创建文件的方法呢？</p>
<p>用过PHP4的人可能还记得，PHP4中的mkdir定义是这样的：
  <br>
  <figure class="highlight xquery">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br></pre></td>
        <td class="code"><pre><span class="line">bool mkdir ( string <span class="variable">$pathname</span> [,int <span class="variable">$mode</span> = <span class="number">0777</span> ] )</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>而PHP5中的定义如下：
  <br>
  <figure class="highlight xquery">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br></pre></td>
        <td class="code"><pre><span class="line">bool mkdir ( string <span class="variable">$pathname</span> [,int <span class="variable">$mode</span> = <span class="number">0777</span> [, bool<span class="variable">$recursive</span> = <span class="literal">false</span> [, resource<span class="variable">$context</span> ]]] )</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>这两个参数最早出现在2003年的php源码中，并在php5.0.0中发布，但是一直到PHP4的最后一个版本4.4.9这两个参数也没有被添加。</p>
<p><strong>那么我们有了第一个答案，使用FileHelper是有兼容性方面考虑的，如果你的程序有可能在低版本的PHP中运行，需要使用外部的文件创建方法。</strong></p>
<p>那么下一个问题，众所周知，Yii对PHP的版本要求是5.1.0，Yii2的版本要求是5.4.0，大多新版框架和系统都已经放弃了对PHP4的支持，那么在高版本PHP上运行的为什么要用FileHelper？</p>
<p><strong>第二个答案是这样的，如果你仅仅是用来创建文件夹，那么mkdir的确更方便，但是mkdir有着几个猪一样的队友，比如rmdir和copy，他们都不支持递归，所以FileHelper更方便，他提供了内置函数外的各种强大功能，还能兼顾兼容性。</strong></p>
<p>Yii2\helpers\CFileHelper 定义如下：</p>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td>
      <td class="code"><pre><span class="line">public static <span class="keyword">function</span> normalizePath(<span class="variable">$path</span>, <span class="variable">$ds</span> = DIRECTORY_SEPARATOR)</span><br><span class="line">public static <span class="keyword">function</span> localize(<span class="variable">$file</span>, <span class="variable">$language</span> = null, <span class="variable">$sourceLanguage</span> = null)</span><br><span class="line">public static <span class="keyword">function</span> getMimeType(<span class="variable">$file</span>, <span class="variable">$magicFile</span> = null, <span class="variable">$checkExtension</span> = <span class="literal">true</span>)</span><br><span class="line">public static <span class="keyword">function</span> getMimeTypeByExtension(<span class="variable">$file</span>, <span class="variable">$magicFile</span> = null)</span><br><span class="line">public static <span class="keyword">function</span> getExtensionsByMimeType(<span class="variable">$mimeType</span>, <span class="variable">$magicFile</span> = null)</span><br><span class="line">public static <span class="keyword">function</span> copyDirectory(<span class="variable">$src</span>, <span class="variable">$dst</span>, <span class="variable">$options</span> = [])</span><br><span class="line">public static <span class="keyword">function</span> removeDirectory(<span class="variable">$dir</span>, <span class="variable">$options</span> = [])</span><br><span class="line">public static <span class="keyword">function</span> findFiles(<span class="variable">$dir</span>, <span class="variable">$options</span> = [])</span><br><span class="line">public static <span class="keyword">function</span> filterPath(<span class="variable">$path</span>, <span class="variable">$options</span>)</span><br><span class="line">public static <span class="keyword">function</span> createDirectory(<span class="variable">$path</span>, <span class="variable">$mode</span> = <span class="number">0775</span>, <span class="variable">$recursive</span> = <span class="literal">true</span>)</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>什么?没看出来强大?好,请看copyDirectory方法关于$option参数的说明:</p>
<figure class="highlight applescript">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td>
      <td class="code"><pre><span class="line">* @param array $options options <span class="keyword">for</span> directory <span class="keyword">copy</span>. Valid options are:</span><br><span class="line">*</span><br><span class="line">* - dirMode: <span class="type">integer</span>, <span class="keyword">the</span> permission <span class="keyword">to</span> be <span class="keyword">set</span> <span class="keyword">for</span> newly copied directories. Defaults <span class="keyword">to</span> <span class="number">0775.</span></span><br><span class="line">* - fileMode: <span class="type">integer</span>, <span class="keyword">the</span> permission <span class="keyword">to</span> be <span class="keyword">set</span> <span class="keyword">for</span> newly copied files. Defaults <span class="keyword">to</span> <span class="keyword">the</span> current environment setting.</span><br><span class="line">* - filter: callback, a PHP callback <span class="keyword">that</span> <span class="keyword">is</span> called <span class="keyword">for</span> each directory <span class="keyword">or</span> <span class="type">file</span>.</span><br><span class="line">* The signature <span class="keyword">of</span> <span class="keyword">the</span> callback should be: `function ($path)`, <span class="keyword">where</span> `$path` refers <span class="keyword">the</span> full <span class="command">path to</span> be filtered.</span><br><span class="line">* The callback can <span class="constant">return</span> one <span class="keyword">of</span> <span class="keyword">the</span> following values:</span><br><span class="line">*</span><br><span class="line">* * <span class="constant">true</span>: <span class="keyword">the</span> directory <span class="keyword">or</span> <span class="type">file</span> will be copied (<span class="keyword">the</span> <span class="string">"only"</span> <span class="keyword">and</span> <span class="string">"except"</span> options will be ignored)</span><br><span class="line">* * <span class="constant">false</span>: <span class="keyword">the</span> directory <span class="keyword">or</span> <span class="type">file</span> will NOT be copied (<span class="keyword">the</span> <span class="string">"only"</span> <span class="keyword">and</span> <span class="string">"except"</span> options will be ignored)</span><br><span class="line">* * null: <span class="keyword">the</span> <span class="string">"only"</span> <span class="keyword">and</span> <span class="string">"except"</span> options will determine whether <span class="keyword">the</span> directory <span class="keyword">or</span> <span class="type">file</span> should be copied</span><br><span class="line">*</span><br><span class="line">* - only: array, <span class="type">list</span> <span class="keyword">of</span> patterns <span class="keyword">that</span> <span class="keyword">the</span> <span class="type">file</span> paths should match <span class="keyword">if</span> they want <span class="keyword">to</span> be copied.</span><br><span class="line">* A path matches a pattern <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">contains</span> <span class="keyword">the</span> pattern <span class="type">string</span> <span class="keyword">at</span> <span class="keyword">its</span> <span class="keyword">end</span>.</span><br><span class="line">* For example, '.php' matches all <span class="type">file</span> paths ending <span class="keyword">with</span> '.php'.</span><br><span class="line">* Note, <span class="keyword">the</span> '/' <span class="property">characters</span> <span class="keyword">in</span> a pattern matches both '/' <span class="keyword">and</span> '\' <span class="keyword">in</span> <span class="keyword">the</span> paths.</span><br><span class="line">* If a <span class="type">file</span> path matches a pattern <span class="keyword">in</span> both <span class="string">"only"</span> <span class="keyword">and</span> <span class="string">"except"</span>, <span class="keyword">it</span> will NOT be copied.</span><br><span class="line">* - except: array, <span class="type">list</span> <span class="keyword">of</span> patterns <span class="keyword">that</span> <span class="keyword">the</span> files <span class="keyword">or</span> directories should match <span class="keyword">if</span> they want <span class="keyword">to</span> be excluded <span class="keyword">from</span> being copied.</span><br><span class="line">* A path matches a pattern <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">contains</span> <span class="keyword">the</span> pattern <span class="type">string</span> <span class="keyword">at</span> <span class="keyword">its</span> <span class="keyword">end</span>.</span><br><span class="line">* Patterns ending <span class="keyword">with</span> '/' apply <span class="keyword">to</span> directory paths only, <span class="keyword">and</span> patterns <span class="keyword">not</span> ending <span class="keyword">with</span> '/'</span><br><span class="line">* apply <span class="keyword">to</span> <span class="type">file</span> paths only. For example, '/a/b' matches all <span class="type">file</span> paths ending <span class="keyword">with</span> '/a/b';</span><br><span class="line">* <span class="keyword">and</span> '.svn/' matches directory paths ending <span class="keyword">with</span> '.svn'. Note, <span class="keyword">the</span> '/' <span class="property">characters</span> <span class="keyword">in</span> a pattern matches</span><br><span class="line">* both '/' <span class="keyword">and</span> '\' <span class="keyword">in</span> <span class="keyword">the</span> paths.</span><br><span class="line">* - caseSensitive: <span class="type">boolean</span>, whether patterns specified <span class="keyword">at</span> <span class="string">"only"</span> <span class="keyword">or</span> <span class="string">"except"</span> should be case sensitive. Defaults <span class="keyword">to</span> <span class="constant">true</span>.</span><br><span class="line">* - recursive: <span class="type">boolean</span>, whether <span class="keyword">the</span> files under <span class="keyword">the</span> subdirectories should also be copied. Defaults <span class="keyword">to</span> <span class="constant">true</span>.</span><br><span class="line">* - beforeCopy: callback, a PHP callback <span class="keyword">that</span> <span class="keyword">is</span> called <span class="keyword">before</span> copying each sub-directory <span class="keyword">or</span> <span class="type">file</span>.</span><br><span class="line">* If <span class="keyword">the</span> callback returns <span class="constant">false</span>, <span class="keyword">the</span> <span class="keyword">copy</span> operation <span class="keyword">for</span> <span class="keyword">the</span> sub-directory <span class="keyword">or</span> <span class="type">file</span> will be cancelled.</span><br><span class="line">* The signature <span class="keyword">of</span> <span class="keyword">the</span> callback should be: `function ($<span class="keyword">from</span>, $<span class="keyword">to</span>)`, <span class="keyword">where</span> `$<span class="keyword">from</span>` <span class="keyword">is</span> <span class="keyword">the</span> sub-directory <span class="keyword">or</span></span><br><span class="line">* <span class="type">file</span> <span class="keyword">to</span> be copied <span class="keyword">from</span>, <span class="keyword">while</span> `$<span class="keyword">to</span>` <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">copy</span> target.</span><br><span class="line">* - afterCopy: callback, a PHP callback <span class="keyword">that</span> <span class="keyword">is</span> called <span class="keyword">after</span> each sub-directory <span class="keyword">or</span> <span class="type">file</span> <span class="keyword">is</span> successfully copied.</span><br><span class="line">* The signature <span class="keyword">of</span> <span class="keyword">the</span> callback should be: `function ($<span class="keyword">from</span>, $<span class="keyword">to</span>)`, <span class="keyword">where</span> `$<span class="keyword">from</span>` <span class="keyword">is</span> <span class="keyword">the</span> sub-directory <span class="keyword">or</span></span><br><span class="line">* <span class="type">file</span> copied <span class="keyword">from</span>, <span class="keyword">while</span> `$<span class="keyword">to</span>` <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">copy</span> target.</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>@bobhero 通过另一角度分析了这个事情，他认为mkdir的这些队友如此设计是有原因的，但最终我没有找到答案。因为Python3关于文件操作的方法是这样的：</p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td>
      <td class="code"><pre><span class="line">os.<span class="function"><span class="title">mkdir</span><span class="params">(path, mode=<span class="number">0</span>o777, *, dir_fd=None)</span></span></span><br><span class="line">os.<span class="function"><span class="title">mkdirs</span><span class="params">(name, mode=<span class="number">0</span>o777, exist_ok=False)</span></span></span><br><span class="line">os.<span class="function"><span class="title">unlink</span><span class="params">(path, *, dir_fd=None)</span></span> </span><br><span class="line">os.<span class="function"><span class="title">remove</span><span class="params">(path, *, dir_fd=None)</span></span></span><br><span class="line">os.<span class="function"><span class="title">removedirs</span><span class="params">(name)</span></span></span><br><span class="line">os.<span class="function"><span class="title">rmdir</span><span class="params">(path, *, dir_fd=None)</span></span></span><br><span class="line">shutil.<span class="function"><span class="title">rmtree</span><span class="params">(path[, ignore_errors[, onerror]])</span></span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>而Ruby2.2.2的文件操作是这样的:</p>
<figure class="highlight stata">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="keyword">Dir</span>.<span class="keyword">mkdir</span>(string [, integer])</span><br><span class="line"><span class="keyword">Dir</span>.<span class="keyword">rmdir</span>(string)</span><br><span class="line"><span class="keyword">Dir</span>.unlink(string)</span><br><span class="line"><span class="keyword">Dir</span>.delete(string)</span><br><span class="line">FileUtils.<span class="keyword">cd</span>(<span class="keyword">dir</span>, options)</span><br><span class="line">FileUtils.<span class="keyword">cd</span>(<span class="keyword">dir</span>, options) &#123;|<span class="keyword">dir</span>| .... &#125;</span><br><span class="line">FileUtils.<span class="keyword">pwd</span>()</span><br><span class="line">FileUtils.<span class="keyword">mkdir</span>(<span class="keyword">dir</span>, options)</span><br><span class="line">FileUtils.<span class="keyword">mkdir</span>(<span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.mkdir_p(<span class="keyword">dir</span>, options)</span><br><span class="line">FileUtils.mkdir_p(<span class="keyword">list</span>, options) </span><br><span class="line">FileUtils.<span class="keyword">rmdir</span>(<span class="keyword">dir</span>, options) </span><br><span class="line">FileUtils.<span class="keyword">rmdir</span>(<span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.<span class="literal">ln</span>(old, new, options)</span><br><span class="line">FileUtils.<span class="literal">ln</span>(<span class="keyword">list</span>, destdir, options) </span><br><span class="line">FileUtils.ln_s(old, new, options)</span><br><span class="line">FileUtils.ln_s(<span class="keyword">list</span>, destdir, options) </span><br><span class="line">FileUtils.ln_sf(src, dest, options) </span><br><span class="line">FileUtils.cp(src, dest, options) </span><br><span class="line">FileUtils.cp(<span class="keyword">list</span>, <span class="keyword">dir</span>, options) </span><br><span class="line">FileUtils.cp_r(src, dest, options)</span><br><span class="line">FileUtils.cp_r(<span class="keyword">list</span>, <span class="keyword">dir</span>, options) </span><br><span class="line">FileUtils.mv(src, dest, options)</span><br><span class="line">FileUtils.mv(<span class="keyword">list</span>, <span class="keyword">dir</span>, options) </span><br><span class="line">FileUtils.<span class="keyword">rm</span>(<span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.rm_r(<span class="keyword">list</span>, options) </span><br><span class="line">FileUtils.rm_rf(<span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.install(src, dest, mode = &lt;src's&gt;, options) </span><br><span class="line">FileUtils.chmod(mode, <span class="keyword">list</span>, options) </span><br><span class="line">FileUtils.chmod_R(mode, <span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.chown(user, group, <span class="keyword">list</span>, options)</span><br><span class="line">FileUtils.chown_R(user, group, <span class="keyword">list</span>, options) </span><br><span class="line">FileUtils.touch(<span class="keyword">list</span>, options)</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>出于什么样的考虑每个语言对此设计有这样的差异我们不得而知，但这的确引发了我不少的思考，你呢？</p>
<p>注：文中提到的FileHelper不仅仅指Yii的CFileHelper，泛指所有第三方文件操作库。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>前几日有同事询问我Yii2中是否有封装递归创建目录的方法，我告知了他CFileHelper的用法，对这个事情我从未有过怀疑，任何成熟的框架必然会封装各种文件操作的方法，但过后我寻思良久，mkdir明明有$recursive参数，为何所有的框架都要封装创建文件的方法呢？</p]]>
    </summary>
    
      <category term="mkdir" scheme="https://blog.foolbird.net/tags/mkdir/"/>
    
      <category term="php" scheme="https://blog.foolbird.net/tags/php/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[循环中的unset和splice]]></title>
    <link href="https://blog.foolbird.net/4551.html"/>
    <id>https://blog.foolbird.net/4551.html</id>
    <published>2015-04-11T07:31:38.000Z</published>
    <updated>2015-12-01T14:49:12.000Z</updated>
    <content type="html"><![CDATA[<p>昨日为了满足运营姑凉们的排序需求，写了一段js代码进行数据筛选，却因为循环出现问题耽误了很久，事情大概是这样的：</p>
<p>在javascript中，没有和php中一样的unset方法，如果要释放掉数组中指定元素要使用.splice()方法。由于循环语句的机制导致如果在循环内splice掉其中的元素，循环指针可能出现蹿位，最终就是导致某些元素没有被遍历到。javascript中for in与jquery中的.each都有这个问题，php中也有splice方法，并且php的循环在使用unset和splice的时候都会出现“意外”，而foreach由于他的特殊性幸免遇难。还是看代码吧，这个很有趣的低级错误常常被我们忽略。</p>
<figure class="highlight xml">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td>
      <td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>];</span><br><span class="line">    <span class="keyword">for</span>(k <span class="keyword">in</span> a)&#123;</span><br><span class="line">        alert(a[k]);</span><br><span class="line">        <span class="keyword">if</span> (a[k] == <span class="string">'c'</span> || a[k] == <span class="string">'d'</span>)</span><br><span class="line">            a.splice(k, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output is abcefg</span></span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td>
      <td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>( <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>);</span><br><span class="line">foreach(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$k</span>=&amp;gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">    echo <span class="variable">$v</span>;</span><br><span class="line">    if (<span class="variable">$v</span> == <span class="string">'c'</span> || <span class="variable">$v</span> == <span class="string">'d'</span>) &#123;</span><br><span class="line">        unset(<span class="variable">$a</span>[<span class="variable">$k</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// output is abcdefg</span><br><span class="line">echo <span class="string">"\n"</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>( <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>);</span><br><span class="line">foreach(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$k</span>=&amp;gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">    echo <span class="variable">$v</span>;</span><br><span class="line">    if (<span class="variable">$v</span> == <span class="string">'c'</span> || <span class="variable">$v</span> == <span class="string">'d'</span>) &#123;</span><br><span class="line">        array_splice(<span class="variable">$a</span>, <span class="variable">$v</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// output is abcdefg</span><br><span class="line">echo <span class="string">"\n"</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>( <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&amp;lt;count(<span class="variable">$a</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    echo <span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">    if (<span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'c'</span> || <span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'d'</span>) &#123;</span><br><span class="line">        unset(<span class="variable">$a</span>[<span class="variable">$i</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// output is abcde</span><br><span class="line">echo <span class="string">"\n"</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>( <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&amp;lt;count(<span class="variable">$a</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    echo <span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">    if (<span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'c'</span> || <span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'d'</span>) &#123;</span><br><span class="line">        unset(<span class="variable">$a</span>[<span class="variable">$i</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// output is abcde</span><br><span class="line">echo <span class="string">"\n"</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>( <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&amp;lt;count(<span class="variable">$a</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    echo <span class="variable">$a</span>[<span class="variable">$i</span>];</span><br><span class="line">    if (<span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'c'</span> || <span class="variable">$a</span>[<span class="variable">$i</span>] == <span class="string">'d'</span>) &#123;</span><br><span class="line">        array_splice(<span class="variable">$a</span>, <span class="variable">$i</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// output is abcefg</span><br></pre></td>
    </tr>
  </table>
</figure>]]></content>
    <summary type="html">
    <![CDATA[<p>昨日为了满足运营姑凉们的排序需求，写了一段js代码进行数据筛选，却因为循环出现问题耽误了很久，事情大概是这样的：</p>
<p>在javascript中，没有和php中一样的unset方法，如果要释放掉数组中指定元素要使用.splice()方法。由于循环语句的机制导致如果在]]>
    </summary>
    
      <category term="javascript" scheme="https://blog.foolbird.net/tags/javascript/"/>
    
      <category term="php" scheme="https://blog.foolbird.net/tags/php/"/>
    
      <category term="splice" scheme="https://blog.foolbird.net/tags/splice/"/>
    
      <category term="unset" scheme="https://blog.foolbird.net/tags/unset/"/>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在那遥远的地方]]></title>
    <link href="https://blog.foolbird.net/4503.html"/>
    <id>https://blog.foolbird.net/4503.html</id>
    <published>2015-01-22T07:42:21.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇迟到了很久的支教总结，刚刚结束了在广西边境一学期的支教生活，这段日子看到了太多，思考了太多，有太多的话想说，却总是不知道从何说起<span style="color: #999999;">（王老师：这句话表现了作者写作时复杂的心理状态-_-|||）</span>。</p>
<p>在旅途中听同行的姑娘讲述了支教的故事，所以萌生了去支教的想法。经过一个月的联系，准备，8月末终于踏上行程，从大东北一路跑到广西边境，成为了一名支教志愿者。</p>
<p>武联村隶属于广西省崇左市龙州县金龙镇，几公里之外便是中越交界，武联完小有六十多个孩子，一共有五个班，一二年级合成了一个班，三年级一个班，四年级一个班，五年级一个班还有学前班，没有六年级，五年级读完便要去镇上读六年级。五个班级只有校长和主任两个人讲课，最近几年这里来了不少志愿者，这个学期只有我和肖老师两个人。</p>
<p>这里多数孩子都是留守儿童，家长都在外地打工，剩下孩子跟着老人或者亲属一起生活。除了留守儿童，还有一些单亲家庭和困难户，甚至还有被镇中心小学淘汰掉的顽皮学生。这些特殊的背景，也造就了这群特殊的孩子。</p>
<p>学校每天上三节或四节课，再加上二十分钟的早读，因为没有足够的老师，所以只开设了数学课和语文课，每周一、三、五下午还有一节“体育课”。有时候他们吵着要上音乐课，但是音乐课上很少有孩子开口跟着我唱歌。有时候他们还吵着要上美术课，然后不管我在上面讲什么，都自顾自的在自己的本子上乱涂乱画。我甚至还给他们上了两节英语课，但是除了ABCDEFG，其他的内容对他们来说显得如此的“难”。</p>
<p>学校每天为孩子们提供三餐，早餐是免费的，其余的要交伙食费，周一、三、五的早餐是粥，周二和周四是粉，午餐和晚餐是豆腐或者豆芽和一些肉丁，这几个月从没有见他们吃过其他的东西，也有很多孩子选择不吃，而是在校长开的超市里买一些零食。</p>
<p>出于各种原因，很多孩子晚上都住在学校，夏天多的时候有十几个，冬天的时候也会有几个孩子。他们在学校里吃晚餐，洗衣服，洗凉水澡，偷偷翻墙出去玩，或者跑到我们的房间来捣乱，有的时候我会给他们放一个电影，这样一整个晚上他们都会很安静。</p>
<p>学校的伙食不太合我和肖老师的口味，所以每周我们都要准备很多的肉和菜，每天晚上炒上两个菜，我们吃过之后再叫上孩子们来吃，孩子们总是很兴奋。如果零花钱足够多，他们晚上还会花一块钱买上一包泡面，然后跑到我的房间来要热水。</p>
<p>村小里的孩子成绩都很差，期中考试，四年级17个孩子，数学10个人及格，语文只有4个人及格。平时的教学管理也非常的困难，这里不像城市里的学校，有着严格的纪律，孩子们上课乱跑乱跳，吵吵闹闹，很少有孩子在认真听讲，所以总要不停的强调纪律，经常提问，以便把他们的注意力吸引过来。</p>
<p>写作业是一个很大的难题，通常连半数都收不上来，而且答案全是出自三四个成绩好的孩子之手。抄袭在他们看来是家常便饭，写作文的时候经常会发现好几个孩子写了一样的作文。他们在家或者在寝室几乎从来不写作业，家里人对此不闻不问，所以几乎每天我都要给他们留一节课的时间来写作业。</p>
<p>惩罚对这些不守规矩的小鬼们的作用很有限，他们甚至更愿意站着上课，或者更愿意站在班级后面上课，这样就能趁老师不注意跳上几下，或者在后面玩他们的小游戏。我是很反感体罚或者打骂孩子的，很生气的时候会拿书，尺子或者笤帚教训他们，但对于他们来说这显得微不足道，因为我很难真的下狠手，他们和我说他们不怕我，和我说以前的老师拿尺子打到手肿起来。</p>
<p>除了学习之外，女孩子对老师的态度也是一个难题，青春期的叛逆再加上她们顽皮的本性，使得老师在他们眼中变成了随时可以打，可以骂，可以侮辱，可以嘲笑，可以捉弄的敌人。男孩子还好一点，有时候他们会怕你，有时候他们愿意把你当成好朋友，有时候甚至会关心你。</p>
<p>这几个月我们犯下了很多的错误，而我至今觉得最大的错误，就是来这里的第一天就失去了一个老师的威严，这本是好事，却给日后的管理增加了不少的难度。另一个很严重的错误可能是自己很难做到对他们严格，总是心慈手软，当然我们都希望自己成为一个和蔼可亲的教师，但当了解了这些的孩子之后，我渐渐的变成了自己最讨厌的样子，我也开始理解为什么多数老师都是这样一幅模样。</p>
<p>读书的时候没能成为一个“好学生”，去教书又没能当一个好的老师，在这里我没能教会孩子们太多的东西，也没办法真正和他们成为朋友，仿佛我在他们身上看到和学到的东西远多于他们在我这学到的。他们让我深刻的体会到了家庭对于孩子成长的重要性，也让我意识到了教育的重要性。</p>
<p>有很多问题一直困扰着我，为什么教育部门不给这里分配足够多的老师？为什么很多村小都关闭了这里还仍然在？为什么家长们要把孩子送到这里来接受如此不正规的教育？仅仅在三公里之外，就是金龙镇中心小学，那里有足够多的老师，有宽阔的操场，有完善的教学设备，优秀的教学质量，而对于很多骑摩托接送孩子的家长，每天只要多花上几分钟的时间，对于那些住校的孩子，一周接送一次就足够了，那么这是为什么?到底谁来为孩子们的未来负责？</p>
<p>除了这些孩子们的顽皮和教育部门的不作为，让我感受到更多的是冷漠，教育工作者的冷漠，家长的冷漠，社会的冷漠，亲人的冷漠，正是他们的冷漠和他们的不关心造成了如今这样的景像。而我们以一己之力很难改变这一切，我们能做的，只有在黎明到来之前陪在他们的身边。</p>
<p>有想去支教的，请移步 <a href="http://www.go9999.com/" title="中国支教联盟" target="_blank" rel="external">http://www.go9999.com/</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>这是一篇迟到了很久的支教总结，刚刚结束了在广西边境一学期的支教生活，这段日子看到了太多，思考了太多，有太多的话想说，却总是不知道从何说起<span style="color: #999999;">（王老师：这句话表现了作者写作时复杂的心理状态-_-|||）</span>。<]]>
    </summary>
    
      <category term="总结" scheme="https://blog.foolbird.net/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="支教" scheme="https://blog.foolbird.net/tags/%E6%94%AF%E6%95%99/"/>
    
      <category term="其他" scheme="https://blog.foolbird.net/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[呼伦贝尔归来]]></title>
    <link href="https://blog.foolbird.net/4316.html"/>
    <id>https://blog.foolbird.net/4316.html</id>
    <published>2014-06-05T13:02:06.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>2014.6.1-2014.6.3</p>
<p>很久之前就想去草原看一看，这次终于成行，可惜不是我之前计划的摩托车游，也不是骑马游，而是四个人一起包了一辆捷达，不过驾照还没拿到手，下次，下次一定亲自载着朋友们去草原上走一走。</p>
<p>行程单如下：</p>
<p>第一日：海拉尔-世界反法西斯战争海拉尔纪念园-达尔吉林寺-莫尔格勒河-拉布达林-根河湿地-白桦林-恩和</p>
<p>第二日：恩和-哈乌尔河-室韦-临江</p>
<p>第三日：临江-莫尔道嘎-德尔布尔-敖鲁古雅部落-海拉尔</p>]]></content>
    <summary type="html">
    <![CDATA[<p>2014.6.1-2014.6.3</p>
<p>很久之前就想去草原看一看，这次终于成行，可惜不是我之前计划的摩托车游，也不是骑马游，而是四个人一起包了一辆捷达，不过驾照还没拿到手，下次，下次一定亲自载着朋友们去草原上走一走。</p>
<p>行程单如下：</p>
<p>第一]]>
    </summary>
    
      <category term="旅行" scheme="https://blog.foolbird.net/categories/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习笔记]]></title>
    <link href="https://blog.foolbird.net/4311.html"/>
    <id>https://blog.foolbird.net/4311.html</id>
    <published>2014-06-05T12:42:59.000Z</published>
    <updated>2015-12-01T14:49:27.000Z</updated>
    <content type="html"><![CDATA[<p>出游归来，游记稍后进行整理，先整理一些技术方面的问题。</p>
<p>两周之前花了一点点时间研究了JS压缩工具 closure-compiler 和 YUI Compressor，主要用来压缩合并javascript代码和文件，YUI简单易用，closure稍微有点复杂，参数和用法也比较多，而且有很强大的解析引擎。</p>
<ul>
  <li><a href="https://code.google.com/p/closure-compiler/" target="_blank" rel="external">https://code.google.com/p/closure-compiler/</a></li>
  <li><a href="https://github.com/yui/yuicompressor/releases" target="_blank" rel="external">https://github.com/yui/yuicompressor/releases</a></li>
</ul>
<p>这两天看了《redis入门指南》，好多问题豁然开朗，有了Redis妈妈再也不用担心我的性能了，以下redis特性：</p>
<ul>
  <li>数据类型：</li>
  <li>字符串</li>
  <li>散列（hash）</li>
  <li>列表（list）</li>
  <li>集合（set）</li>
  <li>有序集合（sorted set）</li>
  <li>事务</li>
  <li>生存时间&amp;缓存</li>
  <li>排序:可以用过SORT命令来实现排序，分页，外链</li>
  <li>任务队列&amp;优先级</li>
  <li>发布&amp;订阅模式</li>
  <li>复制</li>
  <li>持久化</li>
  <li>脚本：使用lua语言自定义关键字及功能</li>
</ul>
<p>PHP5.3和PHP5.4的有太多的新特性，还需要慢慢消化，最近关于PHP的一些内容：</p>
<ul>
  <li>任何代码都可以放在函数内部，包括函数和类；</li>
  <li>5.3开始支持closures（匿名函数）；</li>
  <li>5.4可以使用trait用来实现多重继承；</li>
  <li>5.3开始支持命名空间，手册中用目录来理解命名空间的的确非常通俗易懂。</li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<p>出游归来，游记稍后进行整理，先整理一些技术方面的问题。</p>
<p>两周之前花了一点点时间研究了JS压缩工具 closure-compiler 和 YUI Compressor，主要用来压缩合并javascript代码和文件，YUI简单易用，closure稍微有点复杂，参]]>
    </summary>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习笔记]]></title>
    <link href="https://blog.foolbird.net/4307.html"/>
    <id>https://blog.foolbird.net/4307.html</id>
    <published>2014-05-28T17:41:24.000Z</published>
    <updated>2015-11-30T15:31:15.000Z</updated>
    <content type="html"><![CDATA[<p>今天花在学习上的时间不多，不过也要将做过的事情做一下总结。</p>
<p>写了一个进程监控的程序，可能不太标准，不过看上去已经可以正常工作了，要放到crontab里顶起执行，代码如下：
  <br>
  <figure class="highlight xquery">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td>
        <td class="code"><pre><span class="line">f=<span class="string">'/var/run/maild2.pid'</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$f</span> ] || test $(ps --no-heading `cat <span class="variable">$f</span>` | wc -l) -eq <span class="number">0</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  ruby /home/bobhero/project/smzdtx.com/www.smzdtx.com/script/maild2.rb&amp;</span><br><span class="line">  echo $! &amp;gt; <span class="variable">$f</span></span><br><span class="line">fi</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>今天看到了PHP手册中关于流程控制语句的部分，把一些以前没有注意到的部分记录一下：</p>
<p>return可以放在全局环境中，会结束脚本，也可以在被include的时候返回值；</p>
<p>以下两个语句作用是一样的</p>
<figure class="highlight xquery">
  <table>
    <tr>
      <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td>
      <td class="code"><pre><span class="line">foreach (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&amp;gt; <span class="variable">$value</span>)</span><br><span class="line"><span class="keyword">while</span> (list(<span class="variable">$key</span>, <span class="variable">$value</span>) = each(<span class="variable">$arr</span>))</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>另外list()可以用来解开数组，foreach可以遍历对象的可见属性，并且可以通过Iterator 接口进行定制。</p>
<p>我之看了好多关于require和include之间区别的内容，原来手册里简单一句话就说明白了，原文是这样的“require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行。”</p>
<p>今天就到这，刚刚终于成功把训练强度增加了50%，尝试了好几天终于如愿以偿，继续坚持。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>今天花在学习上的时间不多，不过也要将做过的事情做一下总结。</p>
<p>写了一个进程监控的程序，可能不太标准，不过看上去已经可以正常工作了，要放到crontab里顶起执行，代码如下：
  <br>
  <figure class="highlight xquery">
 ]]>
    </summary>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习笔记]]></title>
    <link href="https://blog.foolbird.net/4299.html"/>
    <id>https://blog.foolbird.net/4299.html</id>
    <published>2014-05-27T18:28:35.000Z</published>
    <updated>2015-11-30T15:33:11.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始写技术笔记，为了总结，记录和达成目标。</p>
<p>今天解决了几个棘手的问题，一个是什么值得监控(<a href="http://smzdtx.com" title="什么值得提醒，什么值得买制定商品邮件提醒服务" target="_blank" rel="external">http://smzdtx.com</a> PS:目前内测阶段)的ruby脚本在crontab下执行失效的问题，情况是用ruby编写的监控脚本手动执行成功，但是在crontab下执行失败并且没有错误提示，跟踪代码发现问题出现在加载了带有中文的邮件模板文件之后，调用gsub方法的时候程序终止，并且无错误信息，经过一番寻找发现问题出在编码上，将读取内容加上.force_encodeing(‘utf-8’)即可，并且在程序头标识了文件编码#
  -<em>- encoding: utf-8 -</em>-；另一个问题是邮件进程异常终止，后来发现是邮件模板中存在字符\r，进行了删除和替换。</p>
<p>今天发现了crontab按秒执行的方法，以下是一个半分钟执行一次的例子：
  <br>
  <figure class="highlight gherkin">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td>
        <td class="code"><pre><span class="line"><span class="keyword">*</span>/1 <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> command </span><br><span class="line"><span class="keyword">*</span>/1 <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> sleep 30 &amp;&amp; command</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>把标准输出和标准错误从定向到指定文件的方法是：
  <br>
  <figure class="highlight cpp">
    <table>
      <tr>
        <td class="gutter"><pre><span class="line">1</span><br></pre></td>
        <td class="code"><pre><span class="line">command &gt; filename <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>另外今天还读了一些PHP手册的内容：</p>
<ul>
  <li>declare命令是一个从来没见过的指令，作用是指定编码或者每n行代码执行事件。</li>
  <li>了解了位操作符&amp;与,|或,^异或,~非,&lt;&lt;,&gt;&gt;, 并且第一次发现我一直遗忘了一个xor（异或）的逻辑操作符，还有了解了E_ALL ^ E_NOTICE的位操作原理。</li>
  <li>使用反引号“<code>&quot;可以执行系统命令，这样就简单多了，不用总是exec，比如$output =</code>dir`;</li>
  <li>字符也是可以进行自增操作的，今天也是第一次知道 ‘A’++// B</li>
  <li>之前在百度遇到的关于global的面试题也在手册里得到了解决，global是可以放在全局中的，是为了让该变量在function中被引用(include)时起到作用。</li>
  <li>另外一个在新浪面试遇到的问题是表达式的返回值问题，$a = 5; 涉及到3个值，一个是整数5， 另一个是$a的值，还有就是该表达式本身的值。</li>
</ul>
<p>今天还下单了两本书《redis入门指南》和《银河系漫游指南》。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始写技术笔记，为了总结，记录和达成目标。</p>
<p>今天解决了几个棘手的问题，一个是什么值得监控(<a href="http://smzdtx.com" title="什么值得提醒，什么值得买制定商品邮件提醒服务" target="_blank" rel="ex]]>
    </summary>
    
      <category term="技术" scheme="https://blog.foolbird.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[泰山 2014.5.2]]></title>
    <link href="https://blog.foolbird.net/4260.html"/>
    <id>https://blog.foolbird.net/4260.html</id>
    <published>2014-05-07T13:05:25.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>这次匆匆离开家，也不知道自己是怎么了，感觉自己再也忍受不了那样的生活，再多一刻，便会疯掉。阴差阳错，一个人来到了泰山，下车的时候天已经黑了，也不知是哪根筋接错了，停留了没多久就踏上了去往泰山的公共汽车。</p>
<p>22：00到达红门，第二天11：30下山，一共历时13.5个小时，看日出耽误了两个小时，背着我那个二十斤的背包，还有这十几天都没好的感冒，下山之后感觉整个人要散架了，又渴又饿又累又困，腿软的不行，今天已经是下山之后的第四天了，才刚刚可以下楼梯。</p>
<p>五一出行太多不便，到处都是人，低头是人，抬头是人，左边是人，右边也是人，好想找个地方躲起来。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>这次匆匆离开家，也不知道自己是怎么了，感觉自己再也忍受不了那样的生活，再多一刻，便会疯掉。阴差阳错，一个人来到了泰山，下车的时候天已经黑了，也不知是哪根筋接错了，停留了没多久就踏上了去往泰山的公共汽车。</p>
<p>22：00到达红门，第二天11：30下山，一共历时13.]]>
    </summary>
    
      <category term="泰山" scheme="https://blog.foolbird.net/tags/%E6%B3%B0%E5%B1%B1/"/>
    
      <category term="旅行" scheme="https://blog.foolbird.net/categories/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[徒步净月潭国家森林公园]]></title>
    <link href="https://blog.foolbird.net/3418.html"/>
    <id>https://blog.foolbird.net/3418.html</id>
    <published>2013-10-27T13:36:30.000Z</published>
    <updated>2016-02-03T03:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>今年的自学考试结束后终于有时间出去走走了，所以计划今天徒步长春净月潭国家森林公园。公园内公路全程大概20公里左右，一共用了5个小时，包括途中去瓦萨博物馆参观，吃午饭的时间，还有后半段穿越树林，我们还在树林中看到了一头鹿。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>今年的自学考试结束后终于有时间出去走走了，所以计划今天徒步长春净月潭国家森林公园。公园内公路全程大概20公里左右，一共用了5个小时，包括途中去瓦萨博物馆参观，吃午饭的时间，还有后半段穿越树林，我们还在树林中看到了一头鹿。</p>]]>
    </summary>
    
      <category term="净月" scheme="https://blog.foolbird.net/tags/%E5%87%80%E6%9C%88/"/>
    
      <category term="徒步" scheme="https://blog.foolbird.net/tags/%E5%BE%92%E6%AD%A5/"/>
    
      <category term="旅行" scheme="https://blog.foolbird.net/categories/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
</feed>
